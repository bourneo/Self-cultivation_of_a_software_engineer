
CSS 工作笔记


CSS 基础核心：

	width：宽；
		max-width: 段落的最大宽度；
			如：max-width: 497px;
		min-width: 段落的最小宽度；
			如：min-width: 212px;
		
	height：高；
		line-height：行高；
			如：line-height：30px;

	align：排列；
		vertical-align：垂直对齐；
			如：vertical-align: top;
		text-align：文本对齐方式；
			如：text-align: center;

	border：边框；
		border-radius：边框圆角；
			如：border-radius: 5px;
		border-bottom：
			如：border-bottom:solid 1px #EEE;
			
				border-radius 可以同时设置 1 到 4 个值。
				如果设置 1 个值，表示 4 个圆角都使用这个值。
				如果设置两个值，表示左上角和右下角使用第一个值，右上角和左下角使用第二个值。
				如果设置三个值，表示左上角使用第一个值，右上角和左下角使用第二个值，右下角使用第三个值。
				如果设置四个值，则依次对应左上角、右上角、右下角、左下角 (顺时针顺序) 。
				　　border-radius: 15px 5px;
				　　border-radius: 15px 5px 25px;
				　　border-radius: 15px 5px 25px 0px;

	margin：外边距；
		margin-top：属性设置元素的上外边距；
			如：
		margin-bottom：属性设置元素的下外边距；
			如：
			
	padding：内边距；
		padding-right：元素的右内边距；
			如：
		padding-left：元素的左内边距；
			如：

	color：颜色；
		background-color：背景色；
			如：background-color: #FFFFFF;
		颜色：
			浅紫：#c9396d;
			红唐：#d23f40；
			蜜柑：#f08300；
			蓝绿：#00BCD4;
			橙黄：#F28D09;
			淡灰：#b9b9b9;
			天蓝：#1296DB;
			橙红：rgba(255,93,36)
			
			
	opacity：透明度：
			opacity:0.80;
			
			
	display：生成的框的类型；
		如：display: block;
		如：display:inline-block; 设置了这个属性，就会认为所在元素是一个块级元素。
			
	float：漂浮；
		如：float: left; 设置了这个属性，就会认为所在元素是一个块级元素。
			
	position：定位元素；
		如：position: absolute;
		如：position: fixed;
		
		
	font-size：字号；
		如：font-size: 14px;
		
	font-weight：字体粗细；
		如：font-weight: bold;
		
	font-style：字体样式；
		如：font-style: italic;
		
		
		
	appearance：设置元素外形
		如：appearance:button;	// 使元素看上去像一个按钮
		
	cursor：光标变化；
		如：cursor: pointer;


	transition：光标停留的触发事件；
		如：
			transition: width 2s;
			-moz-transition: width 2s; 		/* Firefox 4 */
			-webkit-transition: width 2s; 	/* Safari 和 Chrome */
			-o-transition: width 2s; 		/* Opera */
		
		

		



	flex-wrap：让弹性盒元素在必要的时候拆行
		如；flex-wrap: wrap;
		
	transform：旋转；
		如：
			transform:rotate(45deg);
			-ms-transform:rotate(45deg); 	/* IE 9 */
			-moz-transform:rotate(45deg); 	/* Firefox */
			-webkit-transform:rotate(45deg); /* Safari 和 Chrome */
			-o-transform:rotate(45deg); 	/* Opera */
		
	overflow：当内容溢出元素框时发生的事情
		如：overflow:scroll;	// 滚动
		
		

	A>B：表示选择 A 元素的所有子 B 元素；
		如：.gc-item>.label


	!important：增加权重
	left
	right
	top
	bottom
	
	
	
	
	
	
	
	
	
	
CSS 实用：
	
	
	字号：
		字号：
			是中文字库中特有的一种单位，以中文代号表示特定的磅值pt，便于记忆、表述。
		
		px (pixel，像素)：
			是一个虚拟长度单位，是计算机系统的数字化图像长度单位，
			是相对长度单位，像素px是相对于显示器屏幕分辨率而言的；不支持IE的缩放。
			如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。
			Windows系统默认是96dpi，Apple系统默认是72dpi。
			换算：
				16px=1em
				12px=0.75em
				10px=0.625em
		
		em：
			相对长度单位，相对于当前对象内文本的字体尺寸，最初是指字母M的宽度，故名em。
			现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等；
			如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。
				相对单位，网页中的文字能放大和缩小。
				将行距(line-height)，和纵向高度的单位都用em，
				保证缩放时候的整体性。
		
		pt (point，磅)：
			是一个物理长度单位，指的是72分之一英寸。
			在印刷排版中，point是一个绝对值，它等于1/72英寸，可以用尺子丈量的，物理的英寸。
			但是在css中pt含义却并非如此。
			因为我们的显示器被分割为了一个个的像素，单个像素只能有一种颜色 (为了简化，这里暂不讨论次像素反锯齿技术)，
			要在屏幕上显示，必须先把以 pt 为单位的长度转换为以像素为单位的长度，这个转换的媒介，就是 DPI 
			(事实上，这里的所谓的 DPI，是操作系统和浏览器中使用的术语，即为 PPI，pixels per inch，
			和扫描仪、打印机、数码相机中的 DPI 是不同的概念)。
				pt=1/72(英寸)
				px=1/dpi(英寸)
				pt=px*72/dpi
					以Windows下的96dpi来计算：
						pt=px*72/96=px*3/4
						12px=9pt
						10px=7.5pt
		
		为了简化font-size的换算，需要在css中的body选择器中声明：Font-size=62.5%，
			这就使em值变为 16px*62.5%=10px，这样12px=1.2em，10px=1em，
			只需要将你的原来的px数值除以10，然后换上em作为单位就行了。
		
		字号换算表：
			字号	pt		px		em
			初号	42pt	56px	3.5em
			小初	36pt	48px	3em
					34pt	45px	2.75em
					32pt	42px	2.55em
					30pt	40px	2.45em
					29pt	38px	2.35em
					28pt	37px	2.3em
					27pt	36px	2.25em
			一号	26pt	35px	2.2em
					25pt	34px	2.125em
			小一	24pt	32px	2em
			二号	22pt	29px	1.8em
					20pt	26px	1.6em
			小二	18pt	24px	1.5em
					17pt	23px	1.45em
			三号	16pt	22px	1.4em
			小三	15pt	21px	1.3em
					14.5pt	20px	1.25em
			四号	14pt	19px	1.2em
					13.5pt	18px	1.125em
					13pt	17px	1.05em
			小四	12pt	16px	1em
					11pt	15px	0.95em
			五号	10.5pt	14px	0.875em
					10pt	13px	0.8em
			小五	9pt		12px	0.75em
					8pt		11px	0.7em
			六号	7.5pt	10px	0.625em
					7pt		9px		0.55em
			小六	6.5pt	8px		0.5em
			七号	5.5pt	7px		0.4375em
			八号	5pt		6px		0.375em
	
	
	置于顶层：
		<div style="z-index:999"></div>


	svg 格式图片颜色：
		fill="#b9b9b9"



	提示框：
	.load_cart {
		background-size: 130px 30px;
		background-repeat: no-repeat;
		background-color: #bbb;
		position: fixed;
		display: block;
		width: 130px;
		height: 30px;
		bottom: 50%;
		left: 35%;
		border-radius: 5px;
	}

	弹窗：
	<section class="load_cart" style="display: none;">
		<img src="img/success.svg" style=" width:15px;height:15px; display: inline-block;padding-left: 4px;padding-bottom: 4px;">
		<span style="display: inline-block;padding-left: 5px;padding-top: 5px;">加入购物车成功</span>
	</section>

	显示：
	success: function (data) {
		if (data.code == "success") {
			$(".load_cart").show();
			setTimeout("hideSuccessInfo()", 1200);
		} else {
			alert("加入购物车失败");
		}
	}

	隐藏：
	function hideSuccessInfo() {
		$(".load_cart").hide();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	常见伪类：
		:hover,:link,:active,:target,:not(),:focus。
			:hover：选择器用于选择鼠标指针浮动在上面的元素。
				如：
			
	常见伪元素
		::first-letter,::first-line,::before,::after,::selection。
			::before 和::after 下特有的 content：
				用于在 css 渲染中向元素逻辑上的头部或尾部添加内容。
					这些添加不会出现在 DOM 中，不会改变文档内容，不可复制，仅仅是在 css 渲染层加入。
					所以不要用:before 或:after 展示有实际意义的内容，尽量使用它们显示修饰性内容，
						如：图标；网站有些联系电话，希望在它们前加一个 icon☎，就可以使用:before 伪元素。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
CSS 基础：
	
	CSS 里的样式表是由规则组成。每条规则有三个部分：

		选择器 (在示例里：“body”) ，告诉浏览器文档的哪个部分受规则影响了；
		属性 (在示例里：‘color'’和‘background-color’都是属性) ，规定了布局的什么方面被设置了；
		还有值 (‘purple‘和‘#d8da3d’) 给出了样式属性的值。
	
	我们要设置两个属性，因此我们要做两个单独的规则：
		body { color: purple }
		body { background-color: #d8da3d }
	
	
	
	
	
	
	
	
	
	
	
	