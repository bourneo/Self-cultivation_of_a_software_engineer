

JS 工作笔记


常用：
	时间戳转日期：
		
		10 位的时间戳 转 脚本里乘 1000 要么你直接后面加 3 个 000 变成 13 位的!!! 
		//10 位的时间戳转换为时间 方法 1
		function getLocalTime(nS) 
		{ 
			return new Date(parseInt(nS) * 1000).toLocaleString().substr(0,17)
		} 
		//方法 2
		function getDate(tm){ 
			var tt=new Date(parseInt(tm)* 1000).toLocaleString().replace(/年|月/g, "-").replace(/日/g, " ")
			return tt; 
		} 
		13 位的时间戳转换为时间 直接转换 不用乘以 1000
		function getDate(tm){ 
			var tt=new Date(parseInt(tm)).toLocaleString().replace(/年|月/g, "-").replace(/日/g, " ")
			return tt; 
		}
		function timeFormat(nS) { 
		 return new Date(parseInt(("/Date("+nS+")/").substr(6, 13))).toLocaleDateString(); 
		}

		注:数据库中时间类型为 datetime; mybatis 中 jdbcType="TIMESTAMP";传到前台的是 13 位的时间戳;将其按上述方法转换为标准日期时间等
		//TIMESTAMP 为日期加时分秒;DATE 为日期
		//获取当前日期
		var myDate = new Date();
		myDate.getFullYear() 等
		
		
		
	获得 Map 的长度：
		
		var length = Object.keys(map).length ;
		
		
		
		
	Ajax 异步请求的数据，传给外部函数：
		
		$.ajax({
			url: 'data.json',
			type: 'post',
			dataType: 'json',
			success:function(data){
				window._code = data.code; //ajax 外无法访问_code
				ok_go();
				//下面是通过参数传递的方式
				//ok_go(data.code);
			}
		});

		function ok_go(data){
			console.log(window._code);
			//或者也可以通过参数传递过来
			//console.log(data);
		}
		

	生成随机数：
		
		Math.ceil(); //向上取整。

		Math.floor(); //向下取整。

		Math.round(); //四舍五入。

		Math.random(); //0.0 ~ 1.0 之间的一个伪随机数。【包含 0 不包含 1】 //比如 0.8647578968666494

		Math.ceil(Math.random()*10); // 获取从 1 到 10 的随机整数，取 0 的概率极小。

		Math.round(Math.random()); //可均衡获取 0 到 1 的随机整数。

		Math.floor(Math.random()*10); //可均衡获取 0 到 9 的随机整数。

		Math.round(Math.random()*10); //基本均衡获取 0 到 10 的随机整数，其中获取最小值 0 和最大值 10 的几率少一半。

		因为结果在 0~0.4 为 0，0.5 到 1.4 为 1...8.5 到 9.4 为 9，9.5 到 9.9 为 10。所以头尾的分布区间只有其他数字的一半。

		
		

	保留两位小数：
		
		toFixed(2);
		
		
	截取字符串后几位：


		把后四位反过来成了前四位：

			var str = 'abcdefgh';
			var arr = str.split('');
			arr = arr.reverse();
			str = arr.join('');
			var result = str.substring(0,4);
			
		普通方法：
			
			var str = '121221212131312312ewsqdasdsa';
			str.substring(x.length-4);
		
		用数组的 slice 方法：
		
			var str = '121221212131312312ewsqdasdsa';
			str.slice(-4);
		

		
	定时方法：
		
		setTimeout('yourFunction()',5000);   5 秒后执行 yourFunction(), 只执行一次     
		setInterval('yourFunction()',5000);   每隔 5 秒执行一次 u     
			如果在 yourFunction() 中再次调用了 setTimeout('yourFunction()',5000)，
			可以完成类似于 setInterval('yourFunction()',5000) 的功能。
		
		window.setTimeout('$("#liveShow").hide()', 4000 + Math.random());
		
		for 循环中 setTimeout 的问题：
			for 语句不会因为有 setTimeout 的存在而停止，他会跳过 setTimeout，setTimeout 设定的是 100 毫秒的延迟，
			而 for 语句执行根本用不了那么长时间所以会先弹出九个 alert，然后才 setTimeout 中的 alert。
		可以使用递归来解决这个问题：
			var i=0;
			function al(){ 
				i++;
				if(i<10){
					setTimeout('$("#liveShow").hide()', 4000 + Math.random());
				}
			}
			al();
		
		
		
	页面跳转带参数：
		
		var path_url='../goods.html?flag=6&groupClassId='+supplierId+"&supplierCode="+supplierCode;
		window.location.href=path_url;
		window.open("../NewGoodsEdit.html?goodsId="+0+"&storeId="+storeId+"&appType="+appType+"&instan="+instan+"&supplierId="+supplierId);
		
		location=path_url;
		window.location.href=path_url;
		
		window.history.back(-1);
		window.navigate("jb51.jsp"); 

		self.location='jb51.htm'; 
		top.location='jb51.jsp'; 
		
	页面刷新：
		
		window.location.reload();
		
		
	判空：
		groupList !== null && groupList !== undefined && groupList !== ''
		groupList === null
		
		
	初始值：
		var attr = attr || “”;
		这个运算经常用来判断一个变量是否已定义，如果没有定义就给他一个初始值，这在给函数的参数定义一个默认值的时候比较有用。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
JavaScript 笔记


JavaScript 核心
	是什么：
		脚本语言；事件驱动；面向对象；
		解释型；弱类型；
	为什么使用：
		跨浏览器；
	基本原理：
		
	怎么使用：
		嵌入到 <script> 标签中；
		




	基础：

		alert
		document.write
		src 属性
		定义变量
		变量的声明也可以不使用 var 声明



			

	this 关键字
		如果一个函数中有 this，但是它没有被上一级的对象所调用，那么 this 指向的就是 window，这里需要说明的是在 js 的严格版中 this 指向的不是 window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。

		如果一个函数中有 this，这个函数有被上一级的对象所调用，那么 this 指向的就是上一级的对象。

		如果一个函数中有 this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this 指向的也只是它上一级的对象

		this 永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的。











	
	
	
	
	
	