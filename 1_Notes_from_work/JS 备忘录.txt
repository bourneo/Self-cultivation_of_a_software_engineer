

JS 工作笔记



时间戳转日期：
	
	10位的时间戳 转 脚本里乘1000  要么你直接后面加3个000 变成13位的!!!  
	//10位的时间戳转换为时间  方法1
	function getLocalTime(nS) 
	{     
		return new Date(parseInt(nS) * 1000).toLocaleString().substr(0,17)
	}  
	//方法2
	function getDate(tm){ 
		var tt=new Date(parseInt(tm)* 1000).toLocaleString().replace(/年|月/g, "-").replace(/日/g, "         ")
		return tt; 
	} 
	13位的时间戳转换为时间   直接转换 不用乘以1000
	function getDate(tm){ 
		var tt=new Date(parseInt(tm)).toLocaleString().replace(/年|月/g, "-").replace(/日/g, "         ")
		return tt; 
	}
	function timeFormat(nS) {     
	  return new Date(parseInt(("/Date("+nS+")/").substr(6, 13))).toLocaleDateString();     
	}

	注:数据库中时间类型为datetime; mybatis中jdbcType="TIMESTAMP";传到前台的是13位的时间戳;将其按上述方法转换为标准日期时间等
	//TIMESTAMP为日期加时分秒;DATE为日期
	//获取当前日期
	var myDate = new Date();
	myDate.getFullYear()等
	
	
	
获得 Map 的长度：
	
	var length  = Object.keys(map).length ;
	
	
	
	
Ajax 异步请求的数据，传给外部函数：
	
	$.ajax({
		url: 'data.json',
		type: 'post',
		dataType: 'json',
		success:function(data){
			window._code = data.code; //ajax外无法访问_code
			ok_go();
			//下面是通过参数传递的方式
			//ok_go(data.code);
		}
	});

	function ok_go(data){
		console.log(window._code);
		//或者也可以通过参数传递过来
		//console.log(data);
	}
	

生成随机数：
	
	Math.ceil();  //向上取整。

	Math.floor();  //向下取整。

	Math.round();  //四舍五入。

	Math.random();  //0.0 ~ 1.0 之间的一个伪随机数。【包含0不包含1】 //比如0.8647578968666494

	Math.ceil(Math.random()*10);      // 获取从1到10的随机整数 ，取0的概率极小。

	Math.round(Math.random());   //可均衡获取0到1的随机整数。

	Math.floor(Math.random()*10);  //可均衡获取0到9的随机整数。

	Math.round(Math.random()*10);  //基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。

	因为结果在0~0.4 为0，0.5到1.4为1...8.5到9.4为9，9.5到9.9为10。所以头尾的分布区间只有其他数字的一半。

	
	

保留两位小数：
	
	toFixed(2);
	
	
截取字符串后几位：


	把后四位反过来成了前四位：

		var str = 'abcdefgh';
		var arr = str.split('');
		arr = arr.reverse();
		str = arr.join('');
		var result = str.substring(0,4);
		
	普通方法：
		
		var str = '121221212131312312ewsqdasdsa';
		str.substring(x.length-4);
	
	用数组的slice方法：
	
		var str = '121221212131312312ewsqdasdsa';
		str.slice(-4);
	

	
定时方法：
	
	setTimeout('yourFunction()',5000);   5秒后执行yourFunction(),只执行一次     
	setInterval('yourFunction()',5000);   每隔5秒执行一次u     
		如果在yourFunction() 中再次调用了 setTimeout('yourFunction()',5000)，
		可以完成类似于 setInterval('yourFunction()',5000)的功能。
	
	window.setTimeout('$("#liveShow").hide()', 4000 + Math.random());
	
	for 循环中 setTimeout 的问题：
		for语句不会因为有setTimeout的存在而停止，他会跳过setTimeout，setTimeout设定的是100毫秒的延迟，
		而for语句执行根本用不了那么长时间所以会先弹出九个alert，然后才setTimeout中的alert。
	可以使用递归来解决这个问题：
		var i=0;
		function al(){   
			i++;
			if(i<10){
				setTimeout('$("#liveShow").hide()', 4000 + Math.random());
			}
		}
		al();
	
	
	
页面跳转带参数：
	
	var path_url='../goods.html?flag=6&groupClassId='+supplierId+"&supplierCode="+supplierCode;
	window.location.href=path_url;
	window.open("../NewGoodsEdit.html?goodsId="+0+"&storeId="+storeId+"&appType="+appType+"&instan="+instan+"&supplierId="+supplierId);
	
	location=path_url;
	window.location.href=path_url;
	
	window.history.back(-1);
	window.navigate("jb51.jsp"); 

	self.location='jb51.htm'; 
	top.location='jb51.jsp'; 
	
页面刷新：
	
	window.location.reload();
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	