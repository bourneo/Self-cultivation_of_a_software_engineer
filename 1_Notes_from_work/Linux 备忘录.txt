
Linux 笔记


基本命令：

	free -m：内存
	top：资源占用排行
	netstat：网络状态；
	vmstat：状态
	
	pwd：获取当前路径

	查看 swappiness 的当前参数：cat /proc/sys/vm/swappiness
	修改 swappiness 参数为 20：sudo sysctl vm.swappiness=20
	保存设定的 swappiness 值：sudo gedit /etc/sysctl.conf
	然后在底部加入：vm.swappiness=20

	grep：global search regular expression(RE) and print out the line：全面搜索正则表达式并把行打印出来。


	halt：关机
	reboot：重启


		
CentOS 操作

	展示文件列表：ll

	进入文件夹：cd
	进入上级目录：cd ..

	用文本编辑器打开：vi
	保存修改并退出：：wq

	改名：mv
	拷贝：cp

	增减权限：chmod；如：chmod +x name；

	查看网卡信息：ifconfig
	显示当前文件夹的路径：pwd
	查阅正在改变的日志文件：tail -f
	把 filename 里最尾部的内容显示在屏幕：tail -f filename

	执行脚本文件：start
	显示脚本状态：status
	停止运行脚本：stop

	解压：tar xvf / tar zxf
		-c ： create，打包；
		-x ： extract，解包；
		-v ： verbose，显示详细过程；
		-f ：file，打包输出/解包输入文件名，
			在 f 之后要立即接文件名，不要再加其它参数；
			后面跟"-"表示使用“标准输入/输出” (stdin/stdout) 作为输出/输入文件。
		-t ：查看 tar 包里面的文件；
		-z ：打包后用 gzip 压缩，生成.tar.gz 文件；
		-C dir ：解压时指定输出目录；
		-j ：打包后用 zip2 压缩，生成.tar.bz2 文件；
		如：tar -xvf jdk-7u55-linux-i586.tar.gz -C /usr/local/java
		tar -zxvf jdk-7u55-linux-i586.tar.gz -C /usr/local/java

	创建文件夹目录：mkdir dir；如：mkdir /usr/local/java

	修改环境变量：vi /etc/profile

	安装应用：yum install name；如：yum install gcc-c++
	编译到 makefile：make
	安装编译后的文件：make install PREFIX=/usr/local/redis
	启动 redis：./redis-server
	关闭服务：Ctrl + c
	后台运行 redis：./redis-server redis.conf
	查看进程：ps aux|grep name；如：ps aux|grep redis
	指定 redis 连接：
		./redis-cli
		./redis-cli -h 192.168.1.112 -p 6379
	搭建 redis 集群：
		./redis-trib.rb create --replicas 1 192.168.1.112:7001 192.168.1.112:7002 192.168.1.112:7003 192.168.1.112:7004 192.168.1.112:7005 192.168.1.112:7006
	连接 redis 集群：
		./redis-cli -h 192.168.1.112 -p 7001 -c

	以 root 权限操作：su root

	网络配置：ifconfig
	重启：reboot

	
基本命令

	ls -l
	ls -a
	ls -lha

	vim

	tree -LhaC 3

	sudo apt-get update
	apt-get update
	apt-get install metasploit-framework

	uname -a

	cat /proc/cpuinfo

	free -m

	exit
	logout


	cat 全称：concatenate files and print on the standard output
	
	
	
	
	
Linux 基本配置

	修改网络配置：
		vi /etc/sysconfig/network-scripts/ifcfg-eth0
		ONBOOT=yes
		BOOTPROTO=static
		IPADDR=192.168.1.111
		GATEWAY=192.168.1.1
		NETMASK=255.255.255.0
		DNS1=210.21.196.6

		vi /etc/selinux/config
		SELINUX=disabled

		启用 SSH：service sshd start
		关闭防火墙自动启动 chkconfig iptables off
		重启网络服务：service network restart

	安装 JDK：
		下载安装包；
		mkdir /usr/local/java
		tar xf jdk-7u55-linux-i586.tar.gz -C /usr/local/java
		编辑 profile 文件，设置环境变量：vi /etc/profile
			# set java environment
			JAVA_HOME=/usr/local/java/jdk1.7.0_55
			CLASSPATH=.:$JAVA_HOME/lib.tools.jar
			PATH=$PATH:$JAVA_HOME/bin
			export JAVA_HOME CLASSPATH PATH
		或者：
			#set java environment
			JAVA_HOME=/usr/local/java/jdk1.7.0_55
			JRE_HOME=/usr/local/java/jdk1.7.0_55/jre
			CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
			PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
			export JAVA_HOME JRE_HOME CLASS_PATH PATH
		让 profile 修改生效：source /etc/profile
		显示 Java 安装的版本：java -version
		
			# set java environment
			JAVA_HOME=/home/bou/server/java/jdk1.8.0_161
			CLASSPATH=.:$JAVA_HOME/lib.tools.jar
			PATH=$PATH:$JAVA_HOME/bin
			export JAVA_HOME CLASSPATH PATH

			export JAVA_HOME=/home/bou/server/java/jdk1.8.0_161

	安装 tomcat：
		下载安装包；
		mkdir /usr/local/tomcat
		tar xf tomcat.tar.gz -C /usr/local/tomcat
		
		进入/usr/local/tomcat/bin 目录
		找到 startup.sh 文件，Tomcat 的启动文件
		Tomcat 启动：./startup.sh
		检查是否启动成功：ps -ef | grep tomcat
			
		
	配置 zookeeper 集群：
		下载安装包；
		mkdir /usr/local/solr-cloud
		cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper01
		cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper02
		cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper03
		zookeeper01 下创建 data 目录：mkdir data
		如果时配置集群，还需要在 data 下面创建 myid：touch myid
		编辑 myid 文件，写入当前结点的编号；如：1
		进入 zookeeper01 下的 conf 目录，把 zoo_sample.cfg 改名：mv zoo_sample.cfg zoo.cfg
		修改 zoo.cfg：vi zoo.cfg
			dataDir=/usr/local/solr-cloud/zookeeper01/data/
			server.1=192.168.1.115:2881:3881
			server.2=192.168.1.115:2882:3882
			server.3=192.168.1.115:2883:3883
		然后进入 zookeeper02 修改：
			mkdir data
			echo 2 > data/myid
			cat data/myid
		进入 conf 目录：
			mv zoo_sample.cfg zoo.cfg
		修改 zoo.cfg：vi zoo.cfg
			dataDir=/usr/local/solr-cloud/zookeeper02/data/
			server.1=192.168.1.115:2881:3881
			server.2=192.168.1.115:2882:3882
			server.3=192.168.1.115:2883:3883
		然后进入 zookeeper03 修改：
			mkdir data
			echo 3 > data/myid
			cat data/myid
		进入 conf 目录：
			mv zoo_sample.cfg zoo.cfg
		修改 zoo.cfg：vi zoo.cfg
			dataDir=/usr/local/solr-cloud/zookeeper03/data/
			server.1=192.168.1.115:2881:3881
			server.2=192.168.1.115:2882:3882
			server.3=192.168.1.115:2883:3883
		
		启动 zookeeper 的批处理脚本： vi start-zookeeper.sh
			cd zookeeper01/bin
			./zkServer.sh start
			cd ../../
			cd zookeeper02/bin
			./zkServer.sh start
			cd ../../
			cd zookeeper03/bin
			./zkServer.sh start
			cd ../../
		设置 start-zookeeper.sh 权限：
			chmod u+x start-zookeeper.sh 
		启动服务：
			./start-zookeeper.sh 
		查看各个 zookeeper 实例的状态：
			./zookeeper01/bin/zkServer.sh status
			./zookeeper02/bin/zkServer.sh status
			./zookeeper03/bin/zkServer.sh status
		
			
	配置 solr 单服务器：
		下载 tomcat 安装包；解压缩；
		下载 solr 安装包；解压缩；
		mkdir /usr/local/solr
		复制 tomcat 复制到指定目录：
			cp -r apache-tomcat-7.0.47 /usr/local/solr/tomcat
		复制 solr 的 war 包到 tomcat 部署目录：
			cp solr-4.10.3/dist/solr-4.10.3.war /usr/local/solr/tomcat/webapps/solr.war
		启动 tomcat 解压缩 solr.war：/usr/local/solr/tomcat/bin/startup.sh
		关闭 tomcat ：/usr/local/solr/tomcat/bin/shutdown.sh
		回到解压的 solr 目录，复制 example 目录下的 jar 包：
			example/lib/ext/* /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib
		复制 example 目录下的 solr 目录，作为 solrhome ：
			cp -r example/solr /usr/local/solr/solrhome
		回到主目录，修改 tomcat 中 solr 项目下的 web.xml 文件：
			vi /usr/local/solr/tomcat/webapps/solr/WEB-INF/web.xml
		取消 <env-entry> 的注释，修改 solrhome 的路径：
			<env-entry-value>/usr/local/solr/solrhome/</env-entry-value>
		保存退出
		下载中文分词器文件 IK Analyzer 2012FF_hf1；进入该目录
		把分词器中的 jar 包，复制到 tomcat 中 solr 项目的包目录中：
			cp IKAnalyzer2012FF_u1.jar /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/
		在 tomcat 中 solr 项目中，创建 classes 目录：
			mkdir /usr/local/solr/tomcat/webapps/solr/WEB-INF/classes
		把分词器的配置文件复制到 classes 目录下面：
			cp IKAnalyzer.cfg.xml ext_stopword.dic mydict.dic /usr/local/solr/tomcat/webapps/solr/WEB-INF/classes
		进入 solrhome 目录下的 collection1 / config 目录；修改 schema.xml 文件：
			<fieldType name="text_ik" class="solr.TextField">
				<analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/>
			 </fieldType>
			<field name="item_title" type="text_ik" indexed="true" stored="true"/>
			<field name="item_sell_point" type="text_ik" indexed="true" stored="true"/>
			<field name="item_price" type="long" indexed="true" stored="true"/>
			<field name="item_image" type="string" indexed="false" stored="true" />
			<field name="item_category_name" type="string" indexed="true" stored="true" />
			<field name="item_desc" type="text_ik" indexed="true" stored="false" />
			<field name="item_keywords" type="text_ik" indexed="true" stored="false" multiValued="true"/>
			<copyField source="item_title" dest="item_keywords"/>
			<copyField source="item_sell_point" dest="item_keywords"/>
			<copyField source="item_category_name" dest="item_keywords"/>
			<copyField source="item_desc" dest="item_keywords"/>
		
		
	配置 solr 集群：
		下载 tomcat 安装包；并解压；
		mkdir /usr/local/solr-cloud
		复制 tomcat 复制到指定目录：
			cp -r apache-tomcat-7.0.47.tar.gz /usr/local/solr-cloud/tomcat01
			cp -r apache-tomcat-7.0.47.tar.gz /usr/local/solr-cloud/tomcat02
			cp -r apache-tomcat-7.0.47.tar.gz /usr/local/solr-cloud/tomcat03
			cp -r apache-tomcat-7.0.47.tar.gz /usr/local/solr-cloud/tomcat04
		复制 solr 的 war 包到 tomcat 部署目录：
			cp solr-4.10.3/dist/solr-4.10.3.war /usr/local/solr/tomcat/webapps/solr.war
		或者把 solr 目录已经部署过的单服务器版 solr，复制到 solr-cloud 目录：
			cp -r solr/tomcat/webapps/solr/ solr-cloud/tomcat01/webapps/
			cp -r solr/tomcat/webapps/solr/ solr-cloud/tomcat02/webapps/
			cp -r solr/tomcat/webapps/solr/ solr-cloud/tomcat03/webapps/
			cp -r solr/tomcat/webapps/solr/ solr-cloud/tomcat04/webapps/
		把 solr 目录下的 solrhome，复制到 solr-cloud 目录：
			cp -r solr/solrhome/ solr-cloud/solrhome01
			cp -r solr/solrhome/ solr-cloud/solrhome02
			cp -r solr/solrhome/ solr-cloud/solrhome03
			cp -r solr/solrhome/ solr-cloud/solrhome04
		进入各个 solrhome0，修改配置文件 solr.xml：
			<str name="host">192.168.1.115</str>
			<int name="hostPort">8180</int>
		修改各个 tomcat 中 solr 的配置文件 web.xml：vi tomcat01/webapps/solr/WEB-INF/web.xml
			<env-entry-name>solr/home</env-entry-name>
			<env-entry-value>/usr/local/solr-cloud/solrhome04/</env-entry-value>
		修改各个 tomcat bin 目录的 catalina.sh ：
			JAVA_OPTS="-DzkHost=192.168.1.115:2181,192.168.1.115:2182,192.168.1.115:2183"
		安装解压和打包应用：
			yum install -y unzip zip
		在 solr-4.10.3/example 目录下执行：
			java -jar start.jar
		启动 zookeeper 集群：
			./start-zookeeper.sh
		进入 cloud-scripts ：
			cd solr-4.10.3/example/scripts/cloud-scripts/
		把 solrhome 的配置文件上传到 zookeeper 统一管理：
			./zkcli.sh -zkhost 192.168.1.115:2181,192.168.1.115:2182,192.168.1.115:2183 -cmd upconfig -confdir /usr/local/solr-cloud/solrhome01/collection1/conf/ -confname myconf
		进入 /zookeeper01/bin 目录，连接 zookeeper：
			./zkCli.sh -server 192.168.1.115:2182
		查看上传的配置文件：
			ls /configs/myconf 
		在 solr-cloud 目录下创建启动各个 tomcat 的脚本：
			vi start-tomcat.sh
				/usr/local/solr-cloud/tomcat01/bin/startup.sh
				/usr/local/solr-cloud/tomcat02/bin/startup.sh
				/usr/local/solr-cloud/tomcat03/bin/startup.sh
				/usr/local/solr-cloud/tomcat04/bin/startup.sh
		为 start-tomcat.sh 设置权限：
			chmod +x start-tomcat.sh
		SolrCloud 创建 Collection 的命令
			http://192.168.25.154:8180/solr/admin/collections?action=CREATE&name=collection2&numShards=2&replicationFactor=2
		SolrCloud 删除 Collection 的命令
			http://192.168.25.154:8180/solr/admin/collections?action=DELETE&name=collection1
		
		
	安装 ActiveMQ ：
		安装好 JDK；
		下载 ActiveMQ 安装包；解压缩；
		在 bin 目录运行：./activemq start
		解决 503 问题：
			cat /etc/sysconfig/network
			记下 hostname 
			cat /etc/hosts
			如果 hostname 不在 127.0.0.1 后面：
			vi /etc/hosts
			加上 hostnaem
		
		
	安装 Nginx ：
		下载 Nginx 安装包；解压；
		yum install gcc-c++
		yum install -y pcre pcre-devel
		yum install -y zlib zlib-devel
		yum install -y openssl-devel
		进入解压包；
		设置参数：
			./configure \
			--prefix=/usr/local/nginx \
			--pid-path=/var/run/nginx/nginx.pid \
			--lock-path=/var/lock/nginx.lock \
			--error-log-path=/var/log/nginx/error.log \
			--http-log-path=/var/log/nginx/access.log \
			--with-http_gzip_static_module \
			--http-client-body-temp-path=/var/temp/nginx/client \
			--http-proxy-temp-path=/var/temp/nginx/proxy \
			--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
			--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
			--http-scgi-temp-path=/var/temp/nginx/scgi
		编译安装：
			make
			make install
		进入安装目录：cd /usr/local/nginx/sbin/
		创建缓存目录：mkdir /var/temp/nginx -p
		启动：./nginx
		关闭：./nginx -s stop
			 或者：kill 端口号
		快速重启，刷新配置：./nginx -s reload
	配置 Nginx ：
		虚拟主机：
			cp -r html/ html81
			vi html81/index.html
				修改标题做区分；
			vi nginx.conf
				复制 server 并修改；
		反向代理：
			下载 Tomcat 安装包；解压缩；
			复制两份，修改端口号；
			vi html81/index.html
				修改标题做区分；
			vi nginx.conf
				创建两个 upstream 节点；
		负载均衡：
			再复制一份，修改端口号；
			vi html81/index.html
				修改标题做区分；
			vi nginx.conf
				在 upstream 节点中配置多个 server 及其权重；
		
	克隆虚拟机修改配置：
		旧 MAC：HWADDR=00:0C:29:58:BE:5D
		旧 UUID：UUID=f32df752-e424-447c-a42e-943629b02193
		新 MAC：HWADDR=00:50:56:34:90:2E
		vi /etc/udev/rules.d/70-persistent-net.rules
		vi /etc/sysconfig/network-scripts/ifcfg-eth0
	



	
	
	

	
	
查看系统信息的命令
	
	系统

		# uname -a # 查看内核/操作系统/CPU 信息
		# head -n 1 /etc/issue # 查看操作系统版本
		# cat /proc/cpuinfo # 查看 CPU 信息
		# hostname # 查看计算机名
		# lspci -tv # 列出所有 PCI 设备
		# lsusb -tv # 列出所有 USB 设备
		# lsmod # 列出加载的内核模块
		# env # 查看环境变量
		
	资源

		# free -m # 查看内存使用量和交换区使用量
		# df -h # 查看各分区使用情况
		# du -sh <目录名> # 查看指定目录的大小
		# grep MemTotal /proc/meminfo # 查看内存总量
		# grep MemFree /proc/meminfo # 查看空闲内存量
		# uptime # 查看系统运行时间、用户数、负载
		# cat /proc/loadavg # 查看系统负载
		
	磁盘和分区

		# mount | column -t # 查看挂接的分区状态
		# fdisk -l # 查看所有分区
		# swapon -s # 查看所有交换分区
		# hdparm -i /dev/hda # 查看磁盘参数 (仅适用于 IDE 设备)
		# dmesg | grep IDE # 查看启动时 IDE 设备检测状况
		
	网络

		# ifconfig # 查看所有网络接口的属性
		# iptables -L # 查看防火墙设置
		# route -n # 查看路由表
		# netstat -lntp # 查看所有监听端口
		# netstat -antp # 查看所有已经建立的连接
		# netstat -s # 查看网络统计信息
		
	进程

		# ps -ef # 查看所有进程
		# top # 实时显示进程状态
		
	用户

		# w # 查看活动用户
		# id <用户名> # 查看指定用户信息
		# last # 查看用户登录日志
		# cut -d: -f1 /etc/passwd # 查看系统所有用户
		# cut -d: -f1 /etc/group # 查看系统所有组
		# crontab -l # 查看当前用户的计划任务
		
	服务

		# chkconfig --list # 列出所有系统服务
		# chkconfig --list | grep on # 列出所有启动的系统服务
		
	程序

		# rpm -qa # 查看所有安装的软件包
	
	


linux 查看内核版本、系统版本、系统位数

	1. 查看内核版本命令：

		1) [root@q1test01 ~]# cat /proc/version
		 Linux version 2.6.9-22.ELsmp (bhcompile@crowe.devel.redhat.com) (gcc version 3.4.4 20050721

		3.4.4-2)) #1 SMP Mon Sep 19 18:00:54 EDT 2005

		2) [root@q1test01 ~]# uname -a
		 Linux q1test01 2.6.9-22.ELsmp #1 SMP Mon Sep 19 18:00:54 EDT 2005 x86_64 x86_64 x86_64 GNU/Linux

		3) [root@q1test01 ~]# uname -r
		 2.6.9-22.ELsmp

	2. 查看 linux 版本：

		1) 登录到服务器执行 lsb_release -a , 即可列出所有版本信息, 例如:

		 [root@3.5.5Biz-46 ~]# [root@q1test01 ~]# lsb_release -a
		 LSB Version: :core-3.0-amd64:core-3.0-ia32:core-3.0-noarch:graphics-3.0-amd64:graphics-3.0-

		 ia32:graphics-3.0-noarch
		 Distributor ID: RedHatEnterpriseAS
		 Description: Red Hat Enterprise Linux AS release 4 (Nahant Update 2)
		 Release: 4
		 Codename: NahantUpdate2
		 注:这个命令适用于所有的 linux，包括 Redhat、SuSE、Debian 等发行版。

		2) 登录到 linux 执行 cat /etc/issue, 例如如下:

		 [root@q1test01 ~]# cat /etc/issue
		 Red Hat Enterprise Linux AS release 4 (Nahant Update 2)
		 Kernel \r on an \m

		3) 登录到 linux 执行 cat /etc/redhat-release , 例如如下:

		 [root@q1test01 ~]# cat /etc/redhat-release
		 Red Hat Enterprise Linux AS release 4 (Nahant Update 2)
		 注:这种方式下可以直接看到具体的版本号，比如 AS4 Update 1

		4) 登录到 linux 执行 rpm -q redhat-release , 例如如下:

		 [root@q1test01 ~]# rpm -q redhat-release
		 redhat-release-4AS-3
		 注:这种方式下可看到一个所谓的 release 号，比如上边的例子是 3
		 这个 release 号和实际的版本之间存在一定的对应关系，如下：
		 redhat-release-3AS-1 -> Redhat Enterprise Linux AS 3
		 redhat-release-3AS-7.4 -> Redhat Enterprise Linux AS 3 Update 4
		 redhat-release-4AS-2 -> Redhat Enterprise Linux AS 4
		 redhat-release-4AS-2.4 -> Redhat Enterprise Linux AS 4 Update 1
		 redhat-release-4AS-3 -> Redhat Enterprise Linux AS 4 Update 2
		 redhat-release-4AS-4.1 -> Redhat Enterprise Linux AS 4 Update 3
		 redhat-release-4AS-5.5 -> Redhat Enterprise Linux AS 4 Update 4 
		 另:第 3)、4) 两种方法只对 Redhat Linux 有效.

	查看系统是 64 位还是 32 位:

		1、getconf LONG_BIT or getconf WORD_BIT

		2、file /bin/ls

		3、lsb_release -a
	

Ubuntu 笔记

	indicator-sysmonitor 安装：
		sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor
		sudo apt-get update
		sudo apt-get install indicator-sysmonitor
		indicator-sysmonitor &

	Ubuntu 上开启 SSH 服务：

		1. 更新源列表
		打开"终端窗口"，输入"sudo apt-get update"-->回车-->"输入当前登录用户的管理员密码"-->回车, 就可以了。

		2. 安装 openssh-server
		在终端中输入: sudo apt-get install openssh-server

		3. 查看查看 ssh 服务是否启动
		打开"终端窗口"，输入"sudo ps -e |grep ssh"-->回车-->有 sshd, 说明 ssh 服务已经启动，如果没有启动，输入"sudo service ssh start"-->回车-->ssh 服务就会启动。

		没有找到 ssh 服务。

		然后再输入上述命令，查询 ssh 服务。

		4. 查看 Ubuntu IP 地址。
		输入：sudo ifconfig

		5. 下载 putty，然后配置相关信息。

		6. 点击 Open 按钮，连接 Ubuntu。
		输入用户名和密码，回车登陆。


	设置 Ubuntu 下终端窗口的默认大小：

		打开一个终端》菜单》编辑》配置文件》Default 编辑》常规》使用自定义默认终端大小》打上勾》100；40。

		在 Ubuntu 下，终端窗口的默认大小是 80＊24，而根据每个人的喜好不同，你可能需要一个更大的处理窗口，每次又不想这么麻烦的手动整窗口大小，你可以通过以下办法来设置终端窗口的默认大小：

		首先，打开终端并输入：sudo gedit /usr/share/vte/termcap-2.91/xterm

		找到:
		:co#80:it#8:li#24:

		80 是高，24 为宽，修改保存后打开终端即见效果！ (这些自己根据自己的爱好设置) 
		设置后对所有的终端都有效，对 gnome 终端也有效果。

	ubuntu 下如何禁用/启用触控板：
	
		查看输入的硬件信息:xinput list
		启用：xinput --set-prop 13 "Device Enabled" 1 
		禁用：xinput --set-prop 13 "Device Enabled" 0
		# 禁用
		xinput --disable 14
		# 启用
		xinput --enable 14

	Ubuntu 触摸板不能使用问题，解决方法如下：
		1、打开终端，输入命令：
			sudo modprobe -r psmouse
			sudo modprobe psmouse proto=imps
		2、为了下次重启后，还能使用，
			新建文件：
				/etc/modprobe/.d/options
			options 文件内容为：
				options psmouse proto=imps
	
	ubuntu触摸板关闭开启
		sudo rmmod psmouse        #用来禁用触摸板
		sudo modprobe psmouse     #用来启用触摸板
		
	ubuntu 下 Vim 安装：
		locate vi | grep 'vi$' |xargs ls -al
		sudo apt-get install vim
		update-alternatives --display vi
		vim --version
		
	ubuntu 下 Vim 配置：
		vi ~/.vimrc
			基本配置：
				"开启语法高亮
				syntax on
				"依文件类型设置自动缩进
				filetype indent plugin on 
				"显示当前的行号列号：
				set ruler
				"在状态栏显示正在输入的命令
				set showcmd
				"关闭/打开配对括号高亮
				"NoMatchParen
				"DoMatchParen
			行号的显示与隐藏：
				"显示行号：
				set number
				"为方便复制，用<F2>开启/关闭行号显示:
				nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
			启用 Modeline (即允许被编辑的文件以注释的形式设置 Vim 选项，详见 Vim Wiki: Modeline magic) ：
				"启用 Modeline
				set modeline
			如果终端使用的是深色背景：
				"为深色背景调整配色
				set background=dark
				set autoindent 
				set cindent 
				set modeline 
				set ruler 
				set showcmd 
				set showfulltag 
				set showmode 
				set smartcase 
				set smartindent 
				set imcmdline 
				set previewwindow 
				set hlsearch 
				syntax on 

				syntax on“语法高亮显示
				filetype indent on“文件自动缩进
				set showcmd”Show (partial) command in status line.
				set showmatch”Show matching brackets.
				set incsearch”Incremental search
				set mouse=a”Enable mouse usage (all modes) in terminals
				set syn=cpp“语法高亮
				set nu!“显示行号
				set hlsearch
				set nobackup“不产生备份文件
				set ruler“在编辑过程中，在右下角显示光标位置的状态行
				colorscheme evening“设置配色方案
				set autoindent“使用自动对其，也就是把当前行的对其格式应用到下一行
				set smartindent“依据上面的对其格式，智能的选择对其方式
				set tabstop=4“设置 tab 键为 4 个空格
				set shiftwidth=4“设置当前行之间交错时使用 4 个空格
				set enc=utf-8“设置编码
				set fenc=utf-8“设置文件编码
				set fencs=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936“设置文件编码检测类型及支持格式
				set langmenu=zh_CN.UTF-8“指定菜单语言
				set helplang=cn“中文帮助

		Vim 的补全菜单操作方式与一般 IDE 的方式不同，可加入如下设置 [7]：

			"让 Vim 的补全菜单行为与一般 IDE 一致 (参考 VimTip1228)
			set completeopt+=longest
			 
			"离开插入模式后自动关闭预览窗口
			autocmd InsertLeave * if pumvisible() == 0|pclose|endif
			 
			"回车即选中当前项
			inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
			 
			"上下左右键的行为
			inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
			inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
			inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
			inoremap <expr> <PageUp> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
			
		如需自动补全，可安装 AutoComplPop 插件，安装后如需在补全是显示文档 (预览) ，可加入设置：

			let g:acp_completeoptPreview = 1
Vi 编辑器：
	
	进入插入模式：
		按「i」，从光标当前位置开始输入文件； 
		按「a」，从目前光标所在位置的下一个位置开始输入文字； 
		按「o」，插入新的一行，从行首开始输入文字。

	退出插入模式，进入命令行模式：
		按「ESC」键。

	移动光标：
		小写字母「h」、「j」、「k」、「l」控制光标左、下、上、右移一格。
		
		光标跳到下个字的开头：按「w」；
		光标跳到下个字的字尾：按「e」；
		光标回到上个字的开头：按「b」；
		光标移到该行的第 # 个位置：按「#l」；
	
	移动屏幕：
		屏幕往后移动一页：按「ctrl」+「b」；
		屏幕往前移动一页：按「ctrl」+「f」；
		屏幕往后移动半页：按「ctrl」+「u」；
		屏幕往前移动半页：按「ctrl」+「d」；
		
		移动到文章的开头：按「0」；
		移动到文章的最后：按「G」；
		移动到光标所在行的行尾：按「$」；
		移动到光标所在行的行首：按「^」；
		
	删除文字：
		「x」：每按一次，删除光标所在位置的后面一个字符；
		「#x」：例如，「6x」表示删除光标所在位置的后面 6 个字符。
		「X」：大写每按一次，删除光标所在位置的前面一个字符；
		「#X」：例如，「20X」表示删除光标所在位置的前面 20 个字符。
		「dd」：删除光标所在行；
		「#dd」：从光标所在行开始删除 # 行；

	复制：
		「yw」：将光标所在之处到字尾的字符复制到缓冲区； 
		「#yw」：复制 # 个字到缓冲区。
		「yy」：复制光标所在行到缓冲区； 
		「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6 行文字。
		「p」：将缓冲区内的字符贴到光标所在位置；
			注意：所有与 y 有关的复制命令都必须与 p 配合才能完成复制与粘贴功能。

	退出 vi 及保存文件：
		在「命令行模式 (command mode) 」下，按「：」冒号键进入「Last line mode」，
		
		: wq (存盘并退出 vi)；
		: q! (不存盘强制退出 vi)；
		: w filename (输入 「w filename」将文章以指定的文件名 filename 保存)；




	
	
	
	
	