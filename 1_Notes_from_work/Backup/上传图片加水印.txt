	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//商品添加图片加水印
	public Map uploadGoodsImageWithWatermark(HttpServletRequest req,MultipartFile imgFile,int storeId,int goodsid){
		Map map=new HashMap();
		String uuid = UUID.randomUUID().toString().replaceAll("-", "");
		String date = "";
		String fileName = uuid+"."+imgFile.getOriginalFilename().substring(imgFile.getOriginalFilename().lastIndexOf(".") + 1);
		try {
			date = String.valueOf(CommonUtil.getDay(new Date()));
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if (imgFile !=null && !imgFile.isEmpty()) {
//			System.out.println(req.getContextPath());
			String dir =var.images_path+File.separator+"goods"+File.separator+storeId+File.separator+date;
			File fileDir=new File(dir);
			if(!fileDir.exists()){
				//不存在,则创建文件
				fileDir.mkdirs();
			}
			Long time=System.currentTimeMillis();
			String filePath=dir+"/"+fileName;
			// 转存文件
			try {
				MultipartFile file = xxx; 
				CommonsMultipartFile cf= (CommonsMultipartFile)imgFile; 
				DiskFileItem fi = (DiskFileItem)cf.getFileItem(); 
				File f = fi.getStoreLocation();
				addWaterMark(f, filePath);
				
				//String md5=FileUtil.compressPic(filePath, dir+"/", imgFile.getOriginalFilename());
				String filePath2=var.images_url_path+req.getContextPath()+"/images/goods/"+storeId+"/"+date+"/"+fileName;
				//本地filePath，服务器Consts.IMG_SERVER_URL+"goods/"+supplierCode+"/"+System.currentTimeMillis()+imgFile.getOriginalFilename()
				map.put("md5", filePath2);
				//+"goods/"+storeId+"/"+System.currentTimeMillis()+imgFile.getOriginalFilename()
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return map;
	}
	
	
	/**
	 * 加水印
	 * @param ifile
	 */
	public void addWaterMark(File ifile,String url){
		 try {
			String waterMarkContent="论坛报名专用"; 
			Image srcImg = ImageIO.read(ifile);
			int srcImgWidth = srcImg.getWidth(null);
			int srcImgHeight = srcImg.getHeight(null);
			 // 加水印
			BufferedImage bufImg = new BufferedImage(srcImgWidth, srcImgHeight, BufferedImage.TYPE_INT_RGB);
			Graphics2D g = bufImg.createGraphics();
			g.drawImage(srcImg, 0, 0, srcImgWidth, srcImgHeight, null);
			g.setColor(new Color(255,0,0)); //根据图片的背景设置水印颜色
			g.setFont(new Font("宋体",Font.PLAIN,50));              //设置字体
 
			//设置水印的坐标
			int x = 50;//srcImgWidth - 2*getWatermarkLength(waterMarkContent, g);  
			int y = 100;//srcImgHeight - 2*getWatermarkLength(waterMarkContent, g);  
			g.drawString(waterMarkContent, x, y);  //画出水印
			g.dispose();  
			// 输出图片  
			FileOutputStream outImgStream = new FileOutputStream(url);  
			ImageIO.write(bufImg, "jpg", outImgStream);
			System.out.println("添加水印完成");  
			outImgStream.flush();  
			outImgStream.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
	}
	
		private int getWatermarkLength(String waterMarkContent, Graphics2D g) {
			 return g.getFontMetrics(g.getFont()).charsWidth(waterMarkContent.toCharArray(), 0, waterMarkContent.length());  
	}

	
	
	
	
	
	
	
	
	
	
	
	
spring MVC 的MultipartFile转File读取
	第一种方法：

		MultipartFile file = xxx; 
		CommonsMultipartFile cf= (CommonsMultipartFile)file; 
		DiskFileItem fi = (DiskFileItem)cf.getFileItem(); 
		File f = fi.getStoreLocation();

	　　会在项目的根目录的临时文件夹下生成一个文件；

	第二种方法：

	　　transferTo(File dest)；

	　　会在项目中生成一个新文件；

	第三种方法：　  

	　　File f = (File) xxx 强转即可。前提是要配置multipartResolver，要不然会报类型转换失败的异常。

	　　　　<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="104857600"/>
			<property name="maxInMemorySize" value="4096"/>
		</bean>
	　　没试过；
	第四种方法：
	　　Workbook wb = Workbook.getWorkbook(xxx .getInputStream());
	　　转换为输入流，直接读取；
	第五种方法：
	　　byte[] buffer = myfile.getBytes();
	　　先转换为字节数组，没试过；
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	