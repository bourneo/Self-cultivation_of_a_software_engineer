
Mybatis 工作笔记
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Mybatis 里迭代数组：
	1.多参数：
		比如传入的参数为：Map<String,Object>
			数据：status：1
			ids：int[]{101,103,61,75}
		<select id="getEntityList" resultType="App" parameterType="map">  
			select * from t_app   
			where id not in  
			<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">  
				#{item} 
			</foreach>  
		</select>  
	2.一个参数：
		a.如果参数的类型是List, 则在使用时，collection属性要必须指定为：list
			比如传入的参数为：findByIds(List<Long> ids)
			<select id="findByIdsMap" resultMap="BaseResultMap">  
				Select  
				<include refid="Base_Column_List" />  
				from jria where ID in  
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
					#{item}  
				</foreach>  
			</select>   

		b.如果参数的类型是Array,则在使用时，collection属性要必须指定为：array
			比如传入的参数为：findByIds(Long[] ids)
			<select id="findByIdsMap" resultMap="BaseResultMap">  
				select  
				<include refid="Base_Column_List" />  
				from jria where ID in  
				<foreach item="item" index="index" collection="array" open="(" separator="," close=")">  
					#{item}  
				</foreach>  
			</select>
	小结：
		Mybatis 迭代对象中的数组：
			where ID in
			<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
				#{item}
			</foreach>
		Mybatis 迭代数组：
			where ID in
			<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
				#{item}
			</foreach>
		Mybatis 迭代列表：
			where ID in
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
				#{item}
			</foreach>

Mybatis 条件判断：
	<if test="goodsTypeId != 0">and n.GOODS_TYPE_ID=#{goodsTypeId}</if>
	<if test="recommendRank == 1">order by base_num desc</if>
	
	
	
	
	
模糊查询：
	GOODS_NAME like CONCAT(CONCAT('%', #{goodsNameLike,jdbcType=VARCHAR}),'%')
	
有效时间：
	BETWEEN m.START_TIME and m.END_TIME
	
参数类型：
	#{openId,jdbcType=BIGINT}
	
日期格式：
	DATE_FORMAT(NOW(),'%Y%m%d %H%i%s')
	
	
	
	
	
resultType 和 resultMap 区别：
	resultType：
		不需要和实体类进行映射转换；
		比如：
			resultType="map"
			resultType="hashmap"
			resultType="string"
			resultType="java.lang.Long"
			resultType="java.lang.Integer"
	resultMap：
		需要和实体类进行映射转换；
		需要在配置文件中定义一个对应的 resultMap 作为映射的标准；
		比如：
			<resultMap id="PrizeDrawRulesMap" type="com.marketing.mobile.domain.PrizeDrawRules">
				<id column="PRIZE_DRAW_ID" jdbcType="BIGINT" property="prizeDrawId"/>
				<result column="PRIZE_DRAW_LIMIT" jdbcType="BIGINT" property="prizeDrawLimit"/>
				<result column="PRIZE_WIN_LIMIT" jdbcType="BIGINT" property="prizeWinLimit"/>
				<result column="PRIZE_DRAW_NOTES" jdbcType="VARCHAR" property="prizeDrawNotes"/>
				<result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime"/>
				<result column="INSTANCE_ID" jdbcType="BIGINT" property="instanceId"/>
			</resultMap>
			<select id="getRecommendGoodsToday" resultMap="NewGoodsMap">
			</select>
		
		类型：
			jdbcType="VARCHAR"
			jdbcType="BIGINT"
			jdbcType="TIMESTAMP"
		
	
parameterType 和 resultMap 区别：
	parameterType 是传入的参数的类型；
		比如：
			parameterType="com.livedoing.app.wxPublicAcountPrize.domain.PrizeRecord"
			parameterType="java.lang.String"
	resultMap 是属性、字段、类型的映射；
		比如：
			resultMap="PrizeDrawRulesMap"
	
Mybatis中javaType和jdbcType对应关系：
	
	JDBC Type			Java Type
	
	CHAR				String
	VARCHAR				String
	LONGVARCHAR			String
	NUMERIC				java.math.BigDecimal
	DECIMAL				java.math.BigDecimal
	BIT					boolean
	BOOLEAN				boolean
	TINYINT				byte
	SMALLINT			short
	INTEGER				int
	BIGINT				long
	REAL				float
	FLOAT				double
	DOUBLE				double
	BINARY				byte[]
	VARBINARY			byte[]
	LONGVARBINARY		byte[]
	DATE				java.sql.Date
	TIME				java.sql.Time
	TIMESTAMP			java.sql.Timestamp
	CLOB				Clob
	BLOB				Blob
	ARRAY				Array
	DISTINCT			mapping of underlying type
	STRUCT				Struct
	REF					Ref
	DATALINK			java.net.URL[color=red][/color]
	
	
	
	
插入后返回 id：
	MySQL环境下；
	id为自增类型时，插入前加入 SELECT LAST_INSERT_ID()：
		<insert id="addTopLine" parameterType="com.kigang.entity.TopLine">
			<selectKey keyProperty="topId" order="AFTER" resultType="java.lang.Integer">
				SELECT LAST_INSERT_ID()
			</selectKey>
			INSERT into `top_line` (user_id,top_title,top_content,top_image_url,audit_status) VALUES(#{userId},#{topTitle},#{topContent},#{topImageUrl},#{auditStatus})
		</insert>
	当id是UUID类型时，调用 select UUID()：
		<insert id="addTopLine" parameterType="com.kigang.entity.TopLine">
			<selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
				SELECT UUID()
			</selectKey>
			INSERT into `top_line` (user_id,top_title,top_content,top_image_url,audit_status) VALUES(#{userId},#{topTitle},#{topContent},#{topImageUrl},#{auditStatus})
		</insert>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	