
正则表达式


常用正则：
	
	查找文档注释：/\*{1,2}[\s\S]*?\*/
	查找单行注释：//{1,2}[\s\S]*?\n
	
	notepad++ 中英文自动空格：
		([A-Za-z0-9\.,!@#?\)\]\}\+])([\x{4e00}-\x{9fa5}])	$1 $2
		([\x{4e00}-\x{9fa5}])([A-Za-z0-9\(\[\{@#])			$1 $2
		([。，！？〔〕 () 《》“”]) +						$1
		 +([。，！？〔〕 () 《》“”]) 						$1
		 +
	
	中英文自动空格：
		([\u4e00-\u9fa5])([A-Za-z]+)([\u4e00-\u9fa5])		$1 $2 $3
		([A-Za-z])([\u4e00-\u9fa5])							$1 $2
		([\u4e00-\u9fa5])([A-Za-z])							$1 $2
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
前面的.*? 是非贪婪匹配的意思，表示找到最小的就可以了

(?=Expression) 顺序环视，
(?=\\() 匹配正括号

	1. 什么是正则表达式的贪婪与非贪婪匹配
		如：String str="abcaxc";
		Patter p="ab*c";
		贪婪匹配:正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。
		如上面使用模式 p 匹配字符串 str，结果就是匹配到：abcaxc(ab*c)。
		非贪婪匹配：就是匹配到结果就好，就少的匹配字符。
		如上面使用模式 p 匹配字符串 str，结果就是匹配到：abc(ab*c)。

		
	2. 编程中如何区分两种模式
		默认是贪婪模式；在量词后面直接加上一个问号？就是非贪婪模式。
		量词：{m,n}：m 到 n 个
		*：任意多个
		+：一个到多个
		？：0 或一个
		
		.表示除\n 之外的任意字符
		*表示匹配 0-无穷 
		+表示匹配 1-无穷
		(?=Expression) 顺序环视，
		(?=\\() 就是匹配正括号
		懒惰模式正则： 
		src=".*? (?=\\()) "
	
	
	
	
	
	
	
	
	
	
	
	