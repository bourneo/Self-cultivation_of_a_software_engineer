					
					
Socket 笔记
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
简单理解 Socket
					
					
	TCP/IP
		
		要想理解 socket 首先得熟悉一下 TCP/IP 协议族， 
		TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，
		定义了主机如何连入因特网及数据如何再它们之间传输的标准。
		
		从字面意思来看 TCP/IP 是 TCP 和 IP 协议的合称，但实际上 TCP/IP 协议是指因特网整个 TCP/IP 协议族。
		不同于 ISO 模型的七个分层，TCP/IP 协议参考模型把所有的 TCP/IP 系列协议归类到四个抽象层中：

			应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等
			传输层：TCP，UDP
			网络层：IP，ICMP，OSPF，EIGRP，IGMP
			数据链路层：SLIP，CSLIP，PPP，MTU

		每一抽象层建立在低一层提供的服务上，并且为高一层提供服务。
					
		在 TCP/IP 协议中两个因特网主机通过两个路由器和对应的层连接。
					
					
	socket
		
		我们知道两个进程如果需要进行通讯，最基本的一个前提是能够唯一的标示一个进程，
		在本地进程通讯中我们可以使用 PID 来唯一标示一个进程，
		但 PID 只在本地唯一，网络中的两个进程 PID 冲突几率很大，这时候我们需要另辟它径了，
		我们知道 IP 层的 ip 地址可以唯一标示主机，
		而 TCP 层协议和端口号可以唯一标示主机的一个进程，
		这样我们可以利用 [ip 地址 + 协议 + 端口号] 唯一标示网络中的一个进程。

		能够唯一标示网络中的进程后，它们就可以利用 socket 进行通信了，
		什么是 socket 呢？
		我们经常把 socket 翻译为套接字，socket 是在应用层和传输层之间的一个抽象层，
		它把 TCP/IP 层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。
					
		socket 起源于 UNIX，在 Unix 一切皆文件哲学的思想下，
		socket 是一种"打开—读/写—关闭"模式的实现，服务器和客户端各自维护一个"文件"，
		在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。
					
					
	socket 通信流程
					
		服务器根据地址类型（ipv4,ipv6）、socket 类型、协议创建 socket；

		服务器为 socket 绑定 ip 地址和端口号；

		服务器 socket 监听端口号请求，随时准备接收客户端发来的连接，这时候服务器的 socket 并没有被打开；

		客户端创建 socket；

		客户端打开 socket，根据服务器 ip 地址和端口号试图连接服务器 socket；

		服务器 socket 接收到客户端 socket 请求，被动打开，开始接收客户端请求，直到客户端返回连接信息。
			这时候 socket 进入阻塞状态，所谓阻塞即 accept()方法一直到客户端返回连接信息后才返回，开始接收下一个客户端谅解请求；

		客户端连接成功，向服务器发送连接状态信息；

		服务器 accept 方法返回，连接成功；

		客户端向 socket 写入信息；

		服务器读取信息；

		客户端关闭；

		服务器端关闭。
					
					
	三次握手
					
		在 TCP/IP 协议中，TCP 协议通过三次握手建立一个可靠的连接。
					
			客户机首先发出一个 SYN 消息，
			服务器使用 SYN+ACK 应答表示接收到了这个消息，
			最后客户机再以 ACK 消息响应。
			这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。
					
					
		服务器 socket 与客户端 socket 建立连接的部分，其实就是大名鼎鼎的三次握手
					
					
			第一次握手：
				客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号 Synchronize Sequence Numbers），
				syn=j，客户端进入 SYN_SEND 状态等待服务器确认。

			第二次握手：
				服务器接收客户端 syn 包并确认（ack=j+1），
				并向客户端发送一个 SYN 包（syn=k），即 SYN+ACK 包，
				此时服务器进入 SYN_RECV 状态。

			第三次握手：
				客户端收到服务器的 SYN+ACK 包，
				并向服务器发送确认包 ACK(ack=k+1），
				发送完后客户端和服务器进入 ESTABLISHED 状态，完成三次握手。
					
				SYN 报文：同步序列编号；Synchronize Sequence Numbers；
				SEQ 序号：Sequence；
				ACK 报文：acknowledge。
					
					
	socket 编程 API
					
		以 TCP 协议为例，看看 Unix 下的 socket API。
		
		根据指定的地址族、数据类型和协议来分配一个 socket 的描述字及其所用的资源。
					
			int socket(int domain, int type, int protocol);
					
			domain:
				协议族，常用的有 AF_INET、AF_INET6、AF_LOCAL、AF_ROUTE 其中 AF_INET 代表使用 ipv4地址；
			type:
				socket 类型，常用的 socket 类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET 等；
			protocol:
				协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC 等。
					
		把一个地址族中的特定地址赋给 socket：
					
			int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
					
				sockfd:
					socket 描述字，也就是 socket 引用
				addr:
					要绑定给 sockfd 的协议地址
				addrlen:
					地址的长度
					
			通常服务器在启动的时候都会绑定一个众所周知的地址（如 ip 地址 + 端口号），用于提供服务，客户就可以通过它来接连服务器；
			而客户端就不用指定，有系统自动分配一个端口号和自身的 ip 地址组合。
			这就是为什么通常服务器端在 listen 之前会调用 bind()，而客户端就不会调用，而是在 connect()时由系统随机生成一个。
					
		监听 socket：
					
			int listen(int sockfd, int backlog);
					
				sockfd:
					要监听的 socket 描述字
				backlog:
					相应 socket 可以排队的最大连接个数 
					
		连接某个 socket：
					
			int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
					
				sockfd:客户端的 socket 描述字
				addr:服务器的 socket 地址
				addrlen:socket 地址的长度
					
		TCP 服务器监听到客户端请求之后，调用 accept()函数取接收请求：
					
			int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
					
				sockfd:服务器的 socket 描述字
				addr:客户端的 socket 地址
				addrlen:socket 地址的长度
					
		读取 socket 内容：
					
			ssize_t read(int fd, void *buf, size_t count);
					
				fd:socket 描述字
				buf：缓冲区
				count：缓冲区长度	
					
		向 socket 写入内容，其实就是发送内容：
					
			ssize_t write(int fd, const void *buf, size_t count);
					
				fd:socket 描述字
				buf：缓冲区
				count：缓冲区长度
					
					
		socket 标记为以关闭 ，使相应 socket 描述字的引用计数-1，当引用计数为0的时候，触发 TCP 客户端向服务器发送终止连接请求。
					
			int close(int fd);
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					