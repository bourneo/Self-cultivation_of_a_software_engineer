@startmindmap

+[#OrangeRed] JVM

++[#yellow] 垃圾回收

+++[#Pink] 垃圾回收过程

++++[#MediumSpringGreen] 堆

+++++[#LightGreen] 年轻代
++++++ 伊甸区
+++++++_ 伊甸区约是存活区的八倍，因为产生的多幸存的少
++++++ 存活区
+++++++_ 存活 0 区别名 from 区，存活 1 区别名 to 区
++++++ Minor GC
++++++ 复制清理算法

+++++[#LightGreen] 老年代
++++++ Major GC
++++++ 标记清理算法
++++++ 老年代空间分配担保

+++++[#GhostWhite] FullGC
++++++_ 同时 GC 年轻代和老年代

+++++[#GhostWhite] GCRoot
++++++_ 没被 GCRoot 直接引用或间接引用即为垃圾


+++[#Pink] 垃圾回收算法

++++[#MediumSpringGreen] 标记清理算法
+++++_ 有碎片
++++[#MediumSpringGreen] 标记整理算法
+++++_ 代价大
++++[#MediumSpringGreen] 复制算法
+++++_ 两倍内存空间
++++[#MediumSpringGreen] 分代回收算法


+++[#Pink] 垃圾回收器

++++[#DeepSkyBlue] 1
+++++[#GhostWhite] Serial
++++++_ 单线程
+++++[#GhostWhite] Serial Old
++++++_ 单线程

++++[#DeepSkyBlue] 2
+++++[#GhostWhite] ParNew
+++++[#GhostWhite] CMS
++++++_ 最短回收停顿时间

++++[#DeepSkyBlue] 3
+++++[#SkyBlue] Parallel Scavenge
++++++_ 吞吐量优先
+++++[#SkyBlue] Parallel Old
++++++_ 注重吞吐量

++++[#DeepSkyBlue] 4
+++++[#SkyBlue] G1
++++++ 新生代和老年代收集器
+++++++_ 不需要与其他收集器进行合作
++++++ 特点
+++++++_ 并行与并发好，充分利用多 CPU，多核环境下的硬件优势
+++++++_ 空间碎片少，整体上基于标记整理算法，局部上基于复制算法


@endmindmap