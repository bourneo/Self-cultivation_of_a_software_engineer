@startmindmap

+[#OrangeRed] Java

++[#yellow] 基础

+++[#Pink] 数据

++++[#MediumSpringGreen] 基本数据类型

+++++[#LightGreen]_ byte / 字节
++++++_ 1 字节
+++++[#LightGreen]_ short / 短整数
++++++_ 2 字节
+++++[#LightGreen]_ int / 长整数
++++++_ 4 字节
++++++[#LightGreen]_ int 和 Integer
+++++++_ 类型
+++++++_ 实例化
+++++++_ 默认值
+++++++_ 存储方式
+++++[#LightGreen]_ long / 长整数
++++++_ 8 字节
+++++[#LightGreen]_ float / 单精度
++++++_ 4 字节
+++++[#LightGreen]_ double / 双精度
++++++_ 8 字节
+++++[#LightGreen]_ char / 字符
++++++_ 2 字节
+++++[#LightGreen]_ boolean / 布尔值
++++++_ 1/8 字节

++++[#MediumSpringGreen] 数组

+++++[#LightGreen] 原理
++++++[#LightBlue]_ 一种特殊类型，不同于普通对象。不是类，没有对应的 Class 文件
++++++[#LightBlue]_ 不是通过类加载器创建，而是由 JVM 直接在内存中动态构造出来

+++++[#LightGreen] 实现
++++++[#LightBlue]_ 编译器识别出对数组类型的 length 的访问，生成对应的字节码
++++++[#LightBlue]_ 获取数组长度是 JVM 用 arraylength 这个专用字节码指令



+++[#Pink] 对象

++++[#MediumSpringGreen] 对象的创建过程（五）
+++++[#LightGreen] 类加载检查：首先检查是否被加载，加载未加载的对象
+++++[#LightGreen] 分配内存空间
+++++[#LightGreen] 初始化零值
+++++[#LightGreen] 设置对象头
+++++[#LightGreen] init 方法来做初始化操作

++++[#MediumSpringGreen] 对象初始化
+++++[#LightGreen] 父类实例变量和代码块
+++++[#LightGreen] 父类构造器
+++++[#LightGreen] 子类实例变量和代码块
+++++[#LightGreen] 子类构造器
+++++[#LightGreen]_ 如果类还没有被初始化，应先初始化类，再初始化实例

++++[#MediumSpringGreen] 类初始化
+++++[#LightGreen] 静态的（变量，方法，代码块）会被执行
+++++[#LightGreen]_ 类加载的时候执行一次

++++[#MediumSpringGreen] 对象拷贝
+++++[#LightGreen] 深拷贝
+++++[#LightGreen] 浅拷贝



+++[#Pink] JDK 7、JDK 8

++++[#MediumSpringGreen] 优化

+++++[#LightGreen] 集合框架
++++++[#Aquamarine]_ HashMap
++++++[#Aquamarine]_ ConcurrentHashMap
+++++[#LightGreen] JVM 元空间

++++[#MediumSpringGreen] 新特性

+++++[#LightGreen]_ lambda 表达式
+++++[#LightGreen]_ 方法引用
+++++[#LightGreen]_ 默认方法
+++++[#LightGreen]_ 重复注解
+++++[#LightGreen]_ 类型注解



+++[#Pink] 异常

++++[#MediumSpringGreen] Throwable
+++++[#LightGreen] Error（错误）
++++++[#Aquamarine]_ 程序报错，系统收到无法处理的错误消息
++++++[#Aquamarine]_ 比如：IOError
+++++[#LightGreen] Exception（异常）
++++++[#Aquamarine]_ 受检异常
+++++++[#Aquamarine]_ 编译器要求必须处置的异常
+++++++[#Aquamarine]_ 通过 try/catch 捕获该异常
+++++++[#Aquamarine]_ 通过 throw 抛出异常
++++++[#Aquamarine]_ 非受检异常
+++++++[#Aquamarine]_ 编译器不要求强制处置的异常
++++++[#Aquamarine]_ 运行时异常
+++++++[#Aquamarine]_ RuntimeException
++++++[#Aquamarine]_ 非运行时异常
+++++++[#Aquamarine]_ RuntimeException 以外的异常



++[#yellow] 提高

+++[#Pink] 常见问题

++++[#MediumSpringGreen] 如何解决幂等性问题
+++++[#LightGreen] 背景
++++++[#Aquamarine]_ 指一个方法被多次重复执行的时候产生的影响和第一次执行的影响相同
+++++[#LightGreen] 接口只允许调用一次，比如唯一约束、基于 redis 的锁机制。
++++++[#Aquamarine]_ 使用数据库的唯一约束实现幂等，比如对于数据插入类的场景，比如创建订单，因为订单号肯定是唯一的，所以如果是多次调用就会触发数据库的唯一约束异常，从而避免一个请求创建多个订单的问题
++++++[#Aquamarine]_ 使用状态机来实现幂等，所谓的状态机是指一条数据的完整运行状态的转换流程，比如订单状态，因为它的状态只会向前变更，所以多次修改同一条数据的时候，一旦状态发生变更，那么对这条数据修改造成的影响只会发生一次
++++++[#Aquamarine]_ 还可以基于 token 机制、去重表等方法来实现
+++++[#LightGreen] 对数据的影响只会触发一次，比如幂等性、乐观锁

++++[#MediumSpringGreen] IO 和 NIO 有什么区别？？




++[#yellow] 2

+++[#Pink] 3

++++[#MediumSpringGreen] 4
+++++[#LightGreen] 5
++++++[#Aquamarine] 6
+++++++[#Aquamarine]_ 7



'https://juejin.cn/post/6995088510134779912
'https://www.jianshu.com/p/562c4c883459
'https://www.jianshu.com/p/ecc6d3ac100d


@endmindmap