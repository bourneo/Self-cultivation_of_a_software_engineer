@startmindmap

+[#OrangeRed] Concurrent

++[#yellow] 并发

+++[#Pink] JUC

++++[#MediumSpringGreen] 锁分类

+++++[#LightGreen] 排他锁
++++++[#Aquamarine]_ 竞争同一个共享资源，获得锁来实现独占
++++++[#Aquamarine]_ 例如：Synchronized、ReentrantLock

+++++[#LightGreen] 共享锁
++++++[#Aquamarine]_ 允许多个线程同时获得锁
++++++[#Aquamarine]_ 例如：倒数计数器 CountDownLatch、信号量 Semaphore

+++++[#LightGreen] 公平锁和非公平锁
++++++[#Aquamarine]_ 公平锁：只让排队的去竞争锁
++++++[#Aquamarine]_ 非公平锁：和排队的一起去竞争锁

++++[#MediumSpringGreen] CAS 机制

+++++[#LightGreen]_ 背景
++++++[#Aquamarine]_ CompareAndSwap，CAS 是 Java 中 Unsafe 类中的方法
+++++[#LightGreen] 原理
++++++[#Aquamarine]_ Unsafe 类中的 compareAndSwapInt() 方法
++++++[#Aquamarine]_ 比较内存地址的偏移量对应的值和传入的预期值是否相等
++++++[#Aquamarine]_ 多 CPU 情况下，对 CPU 加 Lock 的汇编指令，对缓存或者总线加锁
+++++[#LightGreen] 使用场景
++++++[#Aquamarine]_ Atomic 的原子实现，比如 AtomicInteger，AtomicLong
++++++[#Aquamarine]_ AQS、ConcurrentHashMap、ConcurrentLinkedQueue 等

++++[#MediumSpringGreen] AQS

+++++[#LightGreen] 背景
++++++[#Aquamarine]_ AbstractQueuedSynchronizer / 抽象队列同步器
++++++[#Aquamarine]_ 并发包组件的底层实现：锁 Lock、倒数计数器 countDownLatch、信号量 Semaphore

+++++[#LightGreen] 实现
++++++[#Aquamarine] 互斥变量的设计
+++++++[#Aquamarine]_ state 记录锁竞争的状态
+++++++[#Aquamarine]_ CAS 机制保证 state 更新的原子性

++++++[#Aquamarine] 阻塞和释放锁
+++++++[#Aquamarine]_ 未获取到锁的线程，被 Unsafe 类的 park() 方法，阻塞在双向链表
+++++++[#Aquamarine]_ 释放锁的线程，唤醒链表的头部节点去竞争锁

++++++[#Aquamarine] 公平性
+++++++[#Aquamarine]_ 公平锁：判断双向链表中是否有阻塞线程，有则需要排队等待
+++++++[#Aquamarine]_ 非公平锁：直接尝试修改 state 来竞争锁


++++[#MediumSpringGreen] ReentrantLock
+++++[#LightGreen] 实现
++++++[#Aquamarine] AQS
+++++++[#Aquamarine]_ CAS
+++++++[#Aquamarine]_ 非公平锁



++++[#MediumSpringGreen] Synchronized

+++++[#LightGreen] 锁升级

++++++[#Aquamarine] 偏向锁
+++++++[#Aquamarine]_ 默认
+++++++[#Aquamarine]_ markwork 会记录当前线程 ID
++++++[#Aquamarine] 轻量级锁
+++++++[#Aquamarine]_ 发生偏向锁竞争时，判断 markword 中保存的线程 ID 是否与这个线程 ID 相等
+++++++[#Aquamarine]_ CAS 操作是通过 native 调用 HotSpot 中 bytecodeInterpreter.cpp 实现
++++++[#Aquamarine] 重量级锁
+++++++[#Aquamarine]_ 需要做内核态到用户态的转换

+++++[#LightGreen] 实现
++++++[#Aquamarine]_ 通过 JVM 实现
+++++++[#Aquamarine]_ 非公平锁
+++++++[#Aquamarine]_ 重量级锁：mutex
+++++++[#Aquamarine]_ 重量级以下：对象头


++++[#MediumSpringGreen] ConcurrentHashMap

+++++[#LightGreen] 版本差异
++++++[#Aquamarine]_ java 8：更新时，对指定的节点 Node 进行加锁
++++++[#Aquamarine]_ java 7：对分段 Segment 进行加锁

+++++[#LightGreen] 性能优化
++++++[#Aquamarine]_ 锁粒度的一个缩小：锁数组中的某一个节点
++++++[#Aquamarine]_ 红黑树的引入：hash 冲突过多，链表过长
++++++[#Aquamarine]_ 多线程并发扩容
+++++++[#Aquamarine]_ 扩容中使用多线程，各自迁移自己的分片
++++++[#Aquamarine]_ size() 方法
+++++++[#Aquamarine]_ 线程竞争不激烈，使用 CAS
+++++++[#Aquamarine]_ 线程竞争激烈，使用数组维护元素个数，对并发更新进行负载


++++[#MediumSpringGreen] ConcurrentLinkedQueue

++++[#MediumSpringGreen] Atomic
+++++[#LightGreen]_ AtomicInteger
+++++[#LightGreen]_ AtomicLong




+++[#Pink] 线程安全

++++[#MediumSpringGreen] 根本原因
+++++[#LightGreen] CPU 利用率最大化
++++++[#Aquamarine]_ CPU 三级缓存
++++++[#Aquamarine]_ StoreBuffer
++++++[#Aquamarine]_ 缓存行
++++++[#Aquamarine]_ 操作系统的线程模型

++++[#MediumSpringGreen] 具体表现
+++++[#LightGreen]_ 原子性
++++++[#Aquamarine]_ 原因：CPU 的上下文切换
++++++[#Aquamarine]_ JVM 的 Synchronized
+++++[#LightGreen]_ 有序性
++++++[#Aquamarine]_ 原因：编译器的指令优化
++++++[#Aquamarine]_ volatile 解决指令重排序
+++++[#LightGreen]_ 可见性
++++++[#Aquamarine]_ 原因：CPU 的高速缓存、CPU 的指令重排序、编译器的指令重排序
++++++[#Aquamarine]_ volatile 解决可见性

++++[#MediumSpringGreen] 线程安全与性能
+++++[#LightGreen]_ CPU 三级缓存
+++++[#LightGreen]_ MySQL 的 buffer_pool
+++++[#LightGreen]_ Synchronized 锁升级

++++[#MediumSpringGreen] 伪共享？？
+++++[#LightGreen] 概念
++++++[#Aquamarine] 6
+++++[#LightGreen] 避免
++++++[#Aquamarine] 6
+++++++[#Aquamarine]_ 7



+++[#Pink] 常见问题

++++[#MediumSpringGreen] volatile 作用

+++++[#LightGreen] 共享变量内存可见性
++++++[#Aquamarine]_ 缓存一致性
+++++++[#Aquamarine]_ CPU 高速缓存

++++++[#Aquamarine]_ JVM 的 Lock 汇编指令
+++++++[#Aquamarine]_ 总线锁
++++++++[#Aquamarine]_ 同一时间，只有一个线程使用内存通信
++++++++[#Aquamarine]_ 总线锁导致了 CPU 的使用效率大幅度下降，缓存锁只针对 CPU 三级缓存中的目标数据加锁
+++++++[#Aquamarine]_ 缓存锁
++++++++[#Aquamarine]_ 对三级缓存中的目标数据加锁
++++++++[#Aquamarine]_ 缓存锁是对总线锁的优化
++++++++[#Aquamarine]_ 缓存锁是使用 MESI 缓存一致性来实现的

+++++[#LightGreen] 防止指令重排序
++++++[#Aquamarine]_ 指令编写和执行的顺序
++++++[#Aquamarine]_ CPU 高速缓存
+++++++[#Aquamarine]_ 一级缓存（L1 Cache）、二级缓存（L2 Cache）、三级缓存（L3 Cache）
++++++[#Aquamarine]_ CPU 对 MESI 协议的进一步优化
+++++++[#Aquamarine]_ StoreBuffer 机制
+++++++[#Aquamarine]_ CPU 乱序执行
+++++++[#Aquamarine]_ CPU 内存屏障指令
++++++[#Aquamarine]_ 编译器优化
+++++++[#Aquamarine]_ 避免指令的优化
+++++++[#Aquamarine]_ Happens-before 模型



++++[#MediumSpringGreen] Synchronized 和 Lock

+++++[#LightGreen] 差异

++++++[#Aquamarine] Synchronized 同步关键字
+++++++[#Aquamarine]_ 使用：同步方法、同步代码块
+++++++[#Aquamarine]_ 全局锁：锁对象是类对象、静态对象
+++++++[#Aquamarine]_ 锁粒度：锁对象是普通对象
+++++++[#Aquamarine]_ 被动释放：结束或者异常才释放锁

++++++[#Aquamarine] Lock 是 JUC 包中的接口
+++++++[#Aquamarine]_ 使用：实现类 ReentrantLock
+++++++[#Aquamarine]_ 锁粒度：lock()，unlock() 方法
+++++++[#Aquamarine]_ 加锁解锁的灵活性更高

++++++[#Aquamarine] Lock 特性
+++++++[#Aquamarine]_ synchronized 无法获取锁的状态，lock 可以判断是否获得了锁
+++++++[#Aquamarine]_ synchronized 会自动释放锁，lock 不会自动释放锁，需要手动释放锁，不释放会造成死锁
+++++++[#Aquamarine]_ 非阻塞竞争锁：tryLock() 方法，返回布尔值
+++++++[#Aquamarine]_ 公平锁和非公平锁：让排队的去竞争锁是公平锁

+++++[#LightGreen] 优化
++++++[#Aquamarine]_ Synchronized 使用锁升级机制
+++++++[#Aquamarine]_ 轻量锁、重量锁
++++++[#Aquamarine]_ Lock 使用自旋锁


+++++[#LightGreen] 相似
++++++[#Aquamarine]_ 性能差别不大
++++++[#Aquamarine]_ 功能相同，解决线程安全的工具


++++[#MediumSpringGreen] Condition

+++++[#LightGreen] 原理
++++++[#Aquamarine]_ 相当于 wait / notify 在 JUC 包里面的实现


++++[#MediumSpringGreen] 阻塞队列

+++++[#LightGreen] 特性
'++++++[#Aquamarine]_ 当队列为空的时候，获取队列中元素的消费者线程会被阻塞，同时唤醒生产者线程
'++++++[#Aquamarine]_ 当队列满了的时候，向队列中添加元素的生产者线程被阻塞，同时唤醒消费者线程
'++++++[#Aquamarine]_ 队列为空的时候，获取元素的线程会等待队列变为非空
'++++++[#Aquamarine]_ 当队列满时，存储元素的线程会等待队列可用
++++++[#Aquamarine]_ 队列为空，消费者线程被阻塞，并唤醒生产者线程
++++++[#Aquamarine]_ 队列容量满载，生产者线程被阻塞，并唤醒消费者线程

+++++[#LightGreen] 有界队列
++++++[#Aquamarine] ArrayBlockingQueue
++++++[#Aquamarine]_ 阻塞队列中可以设置容纳的元素个数
++++++[#Aquamarine]_ 场景：线程池
++++++[#Aquamarine]_ 场景：生产者消费者模型

+++++[#LightGreen] 无界队列
++++++[#Aquamarine] LinkedBlockingQueue
++++++[#Aquamarine]_ 没有设置固定大小的队列，容量很大，感受不到长度的限制
++++++[#Aquamarine]_ 风险：并发量大，容易发生线程过度，内存溢出的问题，比如线程池可以几乎无限制的添加任务



+++[#Pink] 其他问题

++++[#MediumSpringGreen] 并行和并发
+++++[#LightGreen] 并行
++++++[#Aquamarine]_ 同一时刻，多个任务同时执行
++++++[#Aquamarine]_ 由核心数量决定
+++++[#LightGreen] 并发
++++++[#Aquamarine]_ 同一时刻 CPU 处理任务的能力
++++++[#Aquamarine]_ CPU 通过时间片机制实现

++++[#MediumSpringGreen] fail-safe 与 fail-fast
+++++[#LightGreen]_ 背景：是多线程并发操作集合时的一种失败处理机制
+++++[#LightGreen] fail-safe
++++++[#Aquamarine]_ 快速失败：抛异常
++++++[#Aquamarine]_ 在集合遍历过程中，一旦发现容器中的数据被修改了，立刻抛出 ConcurrentModificationException 异常
+++++[#LightGreen] fail-fast
++++++[#Aquamarine]_ 失败安全：不抛异常
++++++[#Aquamarine]_ 出现集合元素的修改，不会抛出 ConcurrentModificationException 异常

++++[#MediumSpringGreen] ThreadLocal
+++++[#LightGreen] 一种线程隔离机制，它提供了多线程环境下对于共享变量访问的安全性
+++++[#LightGreen] 每个线程里面，都有一个容器来存储共享变量的副本
+++++[#LightGreen] 原理是，Thread 类里面的一个成员变量 ThreadLocalMap

++++[#MediumSpringGreen] 死锁的发生原因

+++++[#LightGreen] 四个条件
++++++[#Aquamarine]_ 互斥
++++++[#Aquamarine]_ 请求和保持
++++++[#Aquamarine]_ 不可抢占
++++++[#Aquamarine]_ 循环等待

+++++[#LightGreen] 避免
++++++[#Aquamarine]_ 请求和保持：可以一次性申请所有的资源
++++++[#Aquamarine]_ 不可抢占：占用部分资源的线程申请其他资源时，如果申请不到，主动释放占有的资源
++++++[#Aquamarine]_ 循环等待：按序申请资源

++++[#MediumSpringGreen] wait 和 notify 这个为什么要在synchronized 代码块中？？










++[#yellow] 2

+++[#Pink] 3

++++[#MediumSpringGreen] 4
+++++[#LightGreen] 5
++++++[#Aquamarine] 6
+++++++[#Aquamarine]_ 7


@endmindmap