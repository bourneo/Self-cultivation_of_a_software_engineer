@startmindmap

+[#OrangeRed] JVM

++[#yellow] 性能调优

+++[#Pink] 基本实践

++++[#MediumSpringGreen] 分析 heap dump 文件

+++++[#LightGreen] JVM 启动参数
++++++[#Aquamarine] HeapDumpOnOutOfMemoryError
++++++[#Aquamarine] HeapDumpPath

+++++[#LightGreen] 每个类的实例的数量和大小

+++++[#LightGreen] Thread Overview


++++[#MediumSpringGreen] 调优参数

+++++[#LightGreen]_ -Xms256m：初始化堆大小为 256m；
+++++[#LightGreen]_ -Xmx2g：堆最大内存为 2g；
+++++[#LightGreen]_ -Xmn50m：新生代的大小50m；
+++++[#LightGreen]_ -XX:+PrintGCDetails 打印 gc 详细信息；
+++++[#LightGreen]_ -XX:+HeapDumpOnOutOfMemoryError  在发生OutOfMemoryError错误时，来 dump 出堆快照；
+++++[#LightGreen]_ -XX:NewRatio=4    设置年轻的和老年代的内存比例为 1:4；
+++++[#LightGreen]_ -XX:SurvivorRatio=8 设置新生代 Eden 和 Survivor 比例为 8:2；
+++++[#LightGreen]_ -XX:+UseSerialGC   新生代和老年代都用串行收集器 Serial + Serial Old
+++++[#LightGreen]_ -XX:+UseParNewGC 指定使用 ParNew + Serial Old 垃圾回收器组合；
+++++[#LightGreen]_ -XX:+UseParallelGC  新生代使用 Parallel Scavenge，老年代使用 Serial Old
+++++[#LightGreen]_ -XX:+UseParallelOldGC：新生代 ParallelScavenge + 老年代 ParallelOld 组合；
+++++[#LightGreen]_ -XX:+UseConcMarkSweepGC：新生代使用 ParNew，老年代的用 CMS；
+++++[#LightGreen]_ -XX:NewSize：新生代最小值；
+++++[#LightGreen]_ -XX:MaxNewSize：新生代最大值
+++++[#LightGreen]_ -XX:MetaspaceSize 元空间初始化大小
+++++[#LightGreen]_ -XX:MaxMetaspaceSize 元空间最大值


++++[#MediumSpringGreen] 4
+++++[#LightGreen] 5
++++++[#Aquamarine] 6
+++++++[#Aquamarine]_ 7




@endmindmap