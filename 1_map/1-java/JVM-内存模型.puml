@startmindmap

+[#OrangeRed] JVM

++[#yellow] 内存模型 / 运行时数据区

+++[#Pink] 线程共享（二）

++++[#MediumSpringGreen] 堆 / Heap

+++++[#GhostWhite] 对象

+++++[#LightGreen] 字符串常量池
++++++[#Aquamarine]_ 由于字符串不可变，字符串常量池可以节约堆空间

+++++[#LightGreen] 对象的内存布局
++++++[#Aquamarine]_ 对象头（Header）
+++++++[#Aquamarine]_ Mark Word被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间
++++++[#Aquamarine]_ 实例数据（Instance Data）
++++++[#Aquamarine]_ 对齐填充（Padding）


++++[#MediumSpringGreen] 元空间 / 方法区 / Method Area

+++++[#LightGreen] 内容
++++++[#Aquamarine]_ 运行时常量池
++++++[#Aquamarine]_ 静态常量池
++++++[#Aquamarine]_ 静态变量
++++++[#Aquamarine]_ 被虚拟机加载的类型信息
++++++[#Aquamarine]_ 即时编译器编译后的代码缓存
++++++[#Aquamarine]_ 方法区的垃圾收集主要回收两部分内容：废弃的常量和不再使用的类型

+++++[#LightGreen] 问题
++++++[#Aquamarine]_ 大小：本地内存，上限比较大
++++++[#Aquamarine]_ OOM 原因：类过多，占用内存过大
++++++[#Aquamarine]_ 垃圾回收：FullGC



+++[#Pink] 线程私有（三）

++++[#MediumSpringGreen] 虚拟机栈
+++++[#LightGreen] 局部变量表
++++++[#MediumSpringGreen]_ 存的是地址，实际指向的是堆里面的对象
+++++[#GhostWhite] 方法出口
+++++[#LightGreen] 操作数栈
+++++[#GhostWhite] 动态链接

++++[#AliceBlue] 本地方法栈
+++++[#GhostWhite] 由 native 修饰，由 C 语言实现

++++[#AliceBlue] 程序计数器
+++++[#GhostWhite] 记录线程执行的虚拟机字节码指令的地址
+++++[#GhostWhite] 一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器



+++[#Pink] 运行时栈帧的结构

++++[#MediumSpringGreen] 栈帧
+++++[#LightGreen] 一个线程中两个不同的栈帧是完全相互独立的
+++++[#LightGreen] 当前栈帧
++++++[#Aquamarine] 局部变量表
++++++[#Aquamarine] 操作栈 / 操作数栈
+++++++[#Aquamarine]_ 后入先出（Last In First Out，LIFO）栈
++++++[#Aquamarine] 动态链接
+++++++[#Aquamarine]_ 每一次运行期间都转化为直接引用
++++++[#Aquamarine] 返回地址
+++++++[#Aquamarine]_ 方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复上层主调方法的执行状态






@endmindmap