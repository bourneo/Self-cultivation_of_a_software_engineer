@startmindmap

+[#OrangeRed] MySQL

++[#yellow] 索引

+++[#Pink] 基础

++++[#AliceBlue] 索引的分类
+++++[#GhostWhite]_ 主键索引 / 主索引
+++++[#GhostWhite]_ 普通索引
+++++[#GhostWhite]_ 唯一索引
+++++[#GhostWhite]_ 全文索引
+++++[#GhostWhite]_ 联合索引
+++++[#GhostWhite]_ 前缀索引

++++[#MediumSpringGreen] 联合索引 / 组合索引 / 复合索引
+++++[#LightGreen] 最左前缀原则
+++++[#LightGreen] 覆盖索引

++++[#MediumSpringGreen] 索引下推
+++++[#LightGreen]_ 减少回表次数
+++++[#LightGreen]_ index_condition_pushdown 不关
+++++[#LightGreen]_ 查询条件中的字段必须都在二级索引中

++++[#MediumSpringGreen] 聚簇索引、非聚簇索引的区别
+++++[#LightGreen]_ 聚簇索引的主索引的叶子结点存储的是键值对应的数据本身，二级索引的叶子结点存储的是键值对应的数据的主键键值。
+++++[#LightGreen]_ 非聚簇索引的数据表和索引表是分开存储的。

++++[#MediumSpringGreen] 主键索引、非主键索引的区别


+++[#Pink] 提高

++++[#MediumSpringGreen] 索引的设计原则
+++++[#LightGreen]_ 索引列的区分度越高越好，数据散列度越高效果越好
+++++[#LightGreen]_ 利用联合索引和最左前缀原则
+++++[#LightGreen]_ 尽量使用短索引
+++++[#LightGreen]_ 索引不是越多越好

++++[#MediumSpringGreen] 为什么索引能提升效率
+++++[#LightGreen]_ 原因：减少了磁盘 IO 的次数
+++++[#LightGreen]_ InnoDB 采用 B+ 树的数据结构来存储索引
+++++[#LightGreen]_ 树的层度代表查询时磁盘 IO 的次数
+++++[#LightGreen]_ B+ 树高度一般是 1-3 层，能满足千万级的数据存储
+++++[#LightGreen]_ 非叶子节点的大小为 16K（页大小）

+++[#Pink] 索引数据结构

++++[#AliceBlue] B+ Tree 索引
+++++[#GhostWhite] 通过顺序访问指针来提高区间查询的性能

++++[#MediumSpringGreen] B+ Tree 特点
+++++[#LightGreen] 扫表能力更强：叶子节点形成了链表
+++++[#LightGreen] 效率更加稳定：key 和 数据都存在叶子节点
+++++[#LightGreen] IO 次数更少：节点不存数据，所以可以存储更多的元素，树高度更低，查询的 IO 次数更少
+++++[#LightGreen] 排序能力更强

++++[#MediumSpringGreen] B 树、B+ 树的区别
+++++[#LightGreen] 非叶子节点
++++++[#Aquamarine]_ B 树因为节点存的是主键的地址，查找的过程过，在非叶子节点查到匹配的数据，不会继续查子节点
++++++[#Aquamarine]_ B+ 树的非叶子节点不存数据，只存值
+++++[#LightGreen] 叶子节点关系
++++++[#Aquamarine]_ B 树的叶子节点不相连
++++++[#Aquamarine]_ B+ 树的叶子节点是通过双向链表串联的
+++++[#LightGreen] 叶子节点数据
++++++[#Aquamarine]_ B 树的叶子节点存的全是数据的物理地址
++++++[#Aquamarine]_ B+ 树的叶子节点存有字段和值，叶子节点的 key 还存了数据的物理地址
+++++[#LightGreen] 子路数量
++++++[#Aquamarine]_ B 树的子路数量等于关键字数 + 1
++++++[#Aquamarine]_ B+ 树的子路数量等于关键字数


++++[#MediumSpringGreen] 二叉树、二叉查找树、平衡二叉树、B 树、B+ 树
+++++[#LightGreen] 二叉树
++++++[#Aquamarine]_ 每个节点最多有两个子节点
+++++[#LightGreen] 二叉查找树
++++++[#Aquamarine]_ 左子节点小于父节点，右子节点大于父节点
+++++[#LightGreen] 平衡二叉树
++++++[#Aquamarine]_ 左右子树的高度差，不能超过一
++++++[#Aquamarine]_ 通过左旋和右旋实现
+++++[#LightGreen] B 树
++++++[#Aquamarine]_ 子路的数量，等于关键字的数量加一
+++++[#LightGreen] B+ 树
++++++[#Aquamarine]_ 子路的数量，等于关键字的数量
++++++[#Aquamarine]_ 叶子节点使用双向链表连接





+++[#Pink] 存储引擎

++++[#AliceBlue] 常见的存储引擎
+++++[#LightGreen] InnoDB
+++++[#GhostWhite] MyISAM

++++[#AliceBlue] MyISAM 和 InnoDB 的区别
+++++[#GhostWhite]_ 是否支持行级锁
+++++[#GhostWhite]_ 是否支持事务和崩溃后的安全恢复
+++++[#GhostWhite]_ 是否支持外键
+++++[#GhostWhite]_ 是否支持 MVCC
+++++[#GhostWhite]_ 是否支持聚集索引


@endmindmap