@startmindmap

+[#OrangeRed] 设计模式

++[#yellow] 常用的

+++[#MediumSpringGreen] 工厂模式
++++[#GhostWhite] 工厂类
++++[#GhostWhite] 客户类

+++[#MediumSpringGreen] 代理模式
++++[#GhostWhite] 代理类
++++[#GhostWhite] 被代理类


+++[#MediumSpringGreen] 策略模式
++++[#GhostWhite] 接口
++++[#GhostWhite] 将每一个算法封装到具有共同接口的独立的类


++[#yellow] 简单的

+++[#MediumSpringGreen] 单例模式
++++[#GhostWhite] 枚举
++++[#GhostWhite] 静态内部类
++++[#GhostWhite] 饿汉
++++[#LightGreen] （懒汉）双重检查锁 + volatile
+++++[#Aquamarine] new 对象的操作不是原子的，会被编译器成三条指令
++++++[#Aquamarine]_ 为对象分配内存空间
++++++[#Aquamarine]_ 初始化对象
++++++[#Aquamarine]_ 把实例对象，赋值给 instance 引用
+++++[#Aquamarine] 指令重排序
++++++[#Aquamarine]_ 在不影响单线程执行结果的情况下，允许对两个不相互依赖的指令进行重新排序
+++++[#Aquamarine] 其他线程可能会拿到还未初始化的实例
+++++[#Aquamarine] volatile
++++++[#Aquamarine]_ 内存屏障机制，避免指令重排序


+++[#MediumSpringGreen] 观察者
++++[#GhostWhite]_ 生产者
++++[#GhostWhite]_ 消费者
++++[#GhostWhite]_ 观察者

+++[#AliceBlue] 适配器模式
++++[#GhostWhite] 适配类根据参数返还一个合适的实例




++[#yellow] 讨巧的

+++[#MediumSpringGreen] 原型模式
++++[#GhostWhite]_ 实现 Cloneable 接口
++++[#GhostWhite]_ 重写 clone() 方法
++++[#GhostWhite]_ Client / 客户类 / 使用者
++++[#GhostWhite]_ 对象复制、克隆方法

+++[#AliceBlue] 装饰器模式
++++[#GhostWhite] 扩展对象的功能
++++[#GhostWhite] 继承关系的一个替代方案

+++[#AliceBlue] 责任链模式
++++[#GhostWhite] 每一个对象对其下家的引用而连接起来


--[#yellow] 创建型

---[#MediumSpringGreen] 简单工厂
---[#AliceBlue] 工厂方法
---[#AliceBlue] 抽象工厂
---[#MediumSpringGreen] 单例模式
---[#MediumSpringGreen] 原型模式
---[#AliceBlue] 生成器模式


--[#yellow] 结构型

---[#MediumSpringGreen] 代理模式 / Proxy
---[#MediumSpringGreen] 适配器模式 / Adapter
---[#MediumSpringGreen] 装饰模式 / Decorator
---[#AliceBlue] 享元模式 / 蝇量模式 / Flyweight
---[#AliceBlue] 外观模式 / Facade
---[#AliceBlue] 桥接模式 / Bridge
---[#AliceBlue] 组合模式 / Composite


--[#yellow] 行为型

---[#MediumSpringGreen] 策略模式
---[#MediumSpringGreen] 观察者模式
---[#AliceBlue] 责任链
---[#AliceBlue] 模板模式
---[#AliceBlue] 命令模式
---[#AliceBlue] 迭代器
---[#AliceBlue] 中介者模式
---[#AliceBlue] 解释器模式
---[#AliceBlue] 状态模式
---[#AliceBlue] 备忘录模式
---[#AliceBlue] 访问者模式


@endmindmap