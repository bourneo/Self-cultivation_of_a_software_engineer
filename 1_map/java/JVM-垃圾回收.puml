@startmindmap

+[#OrangeRed] JVM

++[#yellow] 垃圾回收

+++[#Pink] 垃圾回收过程

++++[#MediumSpringGreen] 堆 / Heap

+++++[#LightGreen] 年轻代
++++++[#Aquamarine] 伊甸区
+++++++[#Aquamarine]_ 伊甸区约是存活区的八倍，因为产生的多幸存的少
++++++[#Aquamarine] 存活区
+++++++[#Aquamarine]_ 存活 0 区别名 from 区，存活 1 区别名 to 区
++++++[#Aquamarine] Minor GC
++++++[#GhostWhite] 复制清理算法

+++++[#LightGreen] 老年代
++++++[#Aquamarine] Major GC
++++++[#GhostWhite] 标记清理算法
++++++[#GhostWhite] 老年代空间分配担保

+++++[#LightGreen] FullGC
++++++_ 同时 GC 年轻代和老年代

+++++[#LightGreen] GCRoot
++++++_ 没被 GCRoot 直接（强引用）或间接引用即视为垃圾


+++[#Pink] 垃圾回收算法（四）

++++[#MediumSpringGreen] 复制算法
+++++_ 两倍内存空间
++++[#MediumSpringGreen] 分代回收算法
++++[#MediumSpringGreen] 标记清理算法
+++++_ 有碎片
++++[#MediumSpringGreen] 标记整理算法
+++++_ 代价大


+++[#Pink] 垃圾回收器（四）

++++[#DeepSkyBlue] 1
+++++[#AliceBlue] Serial
++++++_ 单线程
+++++[#AliceBlue] Serial Old
++++++_ 单线程

++++[#DeepSkyBlue] 2
+++++[#AliceBlue] ParNew
+++++[#AliceBlue] CMS
++++++_ 最短回收停顿时间

++++[#DeepSkyBlue] 3
+++++[#LightGreen] Parallel Scavenge
++++++_ 吞吐量优先
+++++[#LightGreen] Parallel Old
++++++_ 注重吞吐量

++++[#DeepSkyBlue] 4
+++++[#LightGreen] G1
++++++[#GhostWhite] 新生代和老年代收集器
+++++++_ 不需要与其他收集器进行合作
++++++[#Aquamarine] 特点
+++++++_ 并行与并发好，充分利用多 CPU，多核环境下的硬件优势
+++++++_ 空间碎片少，整体上基于标记整理算法，局部上基于复制算法


@endmindmap