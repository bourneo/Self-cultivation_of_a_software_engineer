@startmindmap

+[#OrangeRed] Dubbo

++[#yellow] 基础

+++[#Pink] 核心功能（三）

++++[#MediumSpringGreen] 发现

+++++[#LightGreen] 流程
++++++[#Aquamarine]_ 提供者 Provider 绑定指定端口并启动服务
++++++[#Aquamarine]_ 提供者连接注册中心，并将本机 IP、端口、应用信息和提供服务信息发送至注册中心存储
++++++[#Aquamarine]_ 消费者 Consumer 连接注册中心 ，并发送应用信息、所求服务信息至注册中心
++++++[#Aquamarine]_ 注册中心根据消费者所求服务信息匹配对应的提供者列表发送至 Consumer 应用缓存
++++++[#Aquamarine]_ Consumer 在发起远程调用时基于缓存的消费者列表择其一发起调用
++++++[#Aquamarine]_ Provider 状态变更会实时通知注册中心、在由注册中心实时推送至 Consumer

++++[#MediumSpringGreen] 调用

+++++[#LightGreen] 协议与序列化
++++++[#Aquamarine]_ Dubbo 协议：Hessian 二进制序列化
++++++[#Aquamarine]_ Rmi 协议：Java 标准二进制序列化
++++++[#Aquamarine]_ Hessian 协议：表单序列化
++++++[#Aquamarine]_ http 协议：表单序列化
++++++[#Aquamarine]_ webservice 协议：SOAP 文本序列化

+++++[#LightGreen] 负载均衡策略（六）
++++++[#Aquamarine]_ 不确定性
+++++++[#Aquamarine]_ 随机选取提供者策略 / Random LoadBalance
+++++++[#Aquamarine]_ 加权随机
+++++++[#Aquamarine]_ 最少活跃调用策略 / LeastActive LoadBalance
+++++++[#Aquamarine]_ 最小请求时间
++++++[#Aquamarine]_ 确定性
+++++++[#Aquamarine]_ 一致性 Hash 策略 / ConstantHash LoadBalance
+++++++[#Aquamarine]_ 轮询选取提供者策略 / RoundRobin LoadBalance

+++++[#LightGreen] Dubbo 和 Feign 区别
++++++[#Aquamarine]_ Feign 是 Spring Cloud 提供的一个声明式的伪 Http 客户端，使用起来更方便
++++++[#Aquamarine]_ Feign 默认集成了 Ribbon
++++++[#Aquamarine]_ Dubbo 小而专一，专注于远程调用，注册中心需要进行整合
++++++[#Aquamarine]_ Dubbo 通过 TCP 长连接的方式进行通信，服务粒度是方法级的

++++[#MediumSpringGreen] 治理

+++++[#LightGreen] 容错策略
++++++[#Aquamarine]_ 失败自动切换 / Failover Cluster（默认）：失败后重试其它服务器，接口要做好幂等处理
++++++[#Aquamarine]_ 快速失败 / Failfast Cluster：失败后立即报错
++++++[#Aquamarine]_ 失败安全 / Failsafe Cluster：失败后不做任何处理，直接忽略
++++++[#Aquamarine]_ 失败自动恢复 / Failback Cluster：后台记录失败请求，定时重发
++++++[#Aquamarine]_ 并行调用多个服务 / Forking Cluster：只要一个成功即返回
++++++[#Aquamarine]_ 广播调用 / Broadcast Cluster：逐个调用服务，任一节点报错则报错



++[#yellow] 提高

+++[#Pink] 设计

++++[#MediumSpringGreen] Dubbo SPI
+++++[#LightGreen]_ Service Provider Interface
+++++[#LightGreen] 本质：将接口实现类的全限定名，配置在文件中；服务加载器读取配置文件，加载实现类
+++++[#LightGreen] 目的：动态替换接口的实现类
+++++[#LightGreen] 优点：很容易的对 Dubbo 进行拓展

++++[#MediumSpringGreen] 框架设计分层（九）
+++++[#LightGreen]_ 服务层
++++++[#Aquamarine]_ 服务接口层 / Service
+++++[#LightGreen]_ 配置层
++++++[#Aquamarine]_ 配置层 / Config
++++++[#Aquamarine]_ 服务代理层 / Proxy
++++++[#Aquamarine]_ 服务注册层 / Registry
++++++[#Aquamarine]_ 集群层 / Cluster
++++++[#Aquamarine]_ 监控层 / Monitor
+++++[#LightGreen]_ 协议层
++++++[#Aquamarine]_ 远程调用层 / Protocol
++++++[#Aquamarine]_ 信息交换层 / Exchange
++++++[#Aquamarine]_ 网络传输层 / Transport


+++[#Pink] 常见问题

++++[#MediumSpringGreen] 为什么不能传大包
+++++[#LightGreen]_ Dubbo 协议采用单一长连接
+++++[#LightGreen]_ 大包会使网络成为瓶颈
++++[#MediumSpringGreen] 为什么采用异步单一长连接
+++++[#LightGreen]_ 通常服务提供者少，如果采用常规的 hessian 服务，服务提供者很容易就被压跨
+++++[#LightGreen]_ 通过单一连接，保证单一消费者不会压死提供者，长连接，减少连接握手验证等，并使用异步 IO，复用线程池，防止 C10K 问题

++++[#MediumSpringGreen] 安全机制
+++++[#LightGreen]_ 通过 Token 令牌防止用户绕过注册中心直连
+++++[#LightGreen]_ 提供服务黑白名单，来控制服务所允许的调用方

++++[#MediumSpringGreen] Dubbo 动态感知服务的下线
+++++[#LightGreen]_ 服务提供者和消费者和 zk 通过长连接，用心跳感应服务的状态
+++++[#LightGreen]_ 如果某个服务状态异常，zk 上的服务注册节点状态会变化
+++++[#LightGreen]_ 利用 zk 的 watch 机制实现节点监听，Dubbo 客户端会收到服务状态变化的通知，删除或者增加服务节点

++++[#MediumSpringGreen] Dubbo 的功能
+++++[#LightGreen]_ 高性能 RPC
+++++[#LightGreen]_ 服务注册和发现
+++++[#LightGreen]_ 容错和负载均衡
+++++[#LightGreen]_ 服务治理
+++++[#LightGreen]_ 流量调度

++++[#MediumSpringGreen] Dubbo 的服务发现流程
+++++[#LightGreen]_ 服务启动
++++++[#Aquamarine]_ 服务提供者和消费者，根据配置信息，连接注册中心
++++++[#Aquamarine]_ 注册和订阅服务
+++++[#LightGreen]_ 注册中心
++++++[#Aquamarine]_ 根据注册和订阅的关系，返回服务信息给各个服务提供者和消费者
++++++[#Aquamarine]_ 服务消费者把服务提供者的信息缓存到本地
++++++[#Aquamarine]_ 服务信息变更之后，服务消费者会收到推送，更新本地的缓存
+++++[#LightGreen]_ 服务消费者
++++++[#Aquamarine]_ 生成代理对象，根据负载均衡策略选择服务提供者
++++++[#Aquamarine]_ 通过 monitor 监听器记录调用次数和响应时间信息
++++++[#Aquamarine]_ 通过代理对象，向服务提供者发起接口调用
+++++[#LightGreen]_ 服务提供者
++++++[#Aquamarine]_ 收到请求后，反序列化数据
++++++[#Aquamarine]_ 通过代理，调用具体的接口实现

++++[#MediumSpringGreen] Dubbo 和 SpringCloud
+++++[#LightGreen]_ 目的
++++++[#Aquamarine]_ Dubbo 是服务调用和治理的框架
++++++[#Aquamarine]_ SpringCloud 是一种微服务解决方案，是一套技术生态体系，是一种行业标准
+++++[#LightGreen]_ 服务调用
++++++[#Aquamarine]_ Dubbo 的服务调用采用的是 rpc，用 netty 和 tcp 协议传输数据
++++++[#Aquamarine]_ SpringCloud 的服务调用，采用的是 Rest 风格的 http 协议

++++[#MediumSpringGreen] Dubbo 的服务请求失败
+++++[#LightGreen] 参考容错策略


++[#yellow] 实践

+++[#Pink] SpringBoot 集成

++++[#MediumSpringGreen] 提供者
+++++[#LightGreen] @Service
+++++[#LightGreen] 配置
++++++[#Aquamarine]_ 注册中心地址和端口
++++++[#Aquamarine]_ 当前服务的名称
++++++[#Aquamarine]_ 服务实现类的路径
++++++[#Aquamarine]_ 暴露服务的端口号
++++++[#Aquamarine]_ RPC 通信协议

++++[#MediumSpringGreen] 消费者
+++++[#LightGreen] @Reference
+++++[#LightGreen] 配置
++++++[#Aquamarine]_ 注册中心地址和端口
++++++[#Aquamarine]_ 当前服务的名称
++++++[#Aquamarine]_ 引用服务的实现类路径


@endmindmap