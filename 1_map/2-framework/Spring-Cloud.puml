@startmindmap

+[#OrangeRed] Spring-Cloud

++[#yellow] 实现方式

+++[#Pink] Spring Cloud Alibaba
++++[#MediumSpringGreen] 注册中心
+++++[#GhostWhite] Nacos Discovery
++++[#AliceBlue] 分布式配置
+++++[#GhostWhite] Nacos Config
++++[#MediumSpringGreen] 服务调用
+++++[#GhostWhite] Dubbo
++++[#AliceBlue] 负载均衡
+++++[#GhostWhite] Spring Cloud Loadbalancer
++++[#AliceBlue] 服务熔断与降级
+++++[#GhostWhite] Sentinel
++++[#AliceBlue] 服务网关
+++++[#GhostWhite] Spring Cloud Gateway
++++[#AliceBlue] 消息队列
+++++[#GhostWhite] RocketMQ
++++[#AliceBlue] 分布式事务
+++++[#GhostWhite] Seata


+++[#Pink] Spring Cloud Netflix
++++[#AliceBlue] Zuul
++++[#AliceBlue] Hystrix
++++[#AliceBlue] Eureka
++++[#AliceBlue] Feign
++++[#AliceBlue] Config
++++[#AliceBlue] Ribbon
++++[#AliceBlue] RabbitMQ


++[#yellow] 常见问题

+++[#Pink] 三剑客

++++[#MediumSpringGreen] 负载均衡
+++++[#LightGreen] RandomRule：随机
+++++[#LightGreen] RoundRobinRule：轮询
+++++[#LightGreen] WeightedResponseTimeRule：权重

++++[#MediumSpringGreen] 服务降级
+++++[#LightGreen]_ 超时降级
+++++[#LightGreen]_ 失败次数降级
+++++[#LightGreen]_ 故障降级

++++[#MediumSpringGreen] 服务熔断
+++++[#LightGreen]_ 自动熔断时机
+++++[#LightGreen]_ 熔断恢复的条件
+++++[#LightGreen]_ 区分核心和非核心功能


++[#yellow] 其他问题

+++[#Pink] 链路追踪

++++[#MediumSpringGreen] 背景
+++++[#GhostWhite]_ 谷歌的论文 Dapper
+++++[#GhostWhite]_ 请求路径的可视化监控

++++[#MediumSpringGreen] 作用
+++++[#GhostWhite]_ 监控的可视化，展示系统各项指标
+++++[#GhostWhite]_ 服务调用的依赖关系管理
+++++[#GhostWhite]_ 故障的快速定位和性能优化
+++++[#GhostWhite]_ 数据分析能力（用户的行为路径）

++++[#MediumSpringGreen] 工具
+++++[#GhostWhite]_ SkyWalking
++++++[#Aquamarine] 模块
+++++++[#Aquamarine]_ SkyWalking Agent
+++++++[#Aquamarine]_ SkyWalking Collector
+++++++[#Aquamarine]_ Storage
+++++++[#Aquamarine]_ SkyWalking UI
++++++[#Aquamarine] 核心概念
+++++++[#Aquamarine]_ 服务 (Service)
+++++++[#Aquamarine]_ 服务实例 (Service Instance)
+++++++[#Aquamarine]_ 端点 (Endpoint)
+++++[#GhostWhite]_ zipkin


+++[#Pink] Seata

++++[#MediumSpringGreen]_ 分布式事务框架

++++[#MediumSpringGreen] 强一致性
+++++[#LightGreen]_ 所有的事务参与者要么全部成功，要么全部失败
+++++[#LightGreen]_ 全局事务协调者需要知道每个事务参与者的执行状态，再根据状态来决定数据的提交或者回滚
+++++[#LightGreen]_ 强一致性方案对于应用的性能和可用性会有影响
+++++[#LightGreen]_ 可以通过基于 XA 协议下的二阶段提交来实现

++++[#MediumSpringGreen] 最终一致性
+++++[#LightGreen]_ 弱一致性
+++++[#LightGreen]_ 多个网络节点的数据允许出现不一致的情况，但是在最终的某个时间点会达成数据一致
+++++[#LightGreen]_ 可以基于 TCC 事务模型、可靠性消息模型等方案来实现

++++[#MediumSpringGreen] 四种模式
+++++[#LightGreen] AT 模式
++++++[#Aquamarine]_ 基于本地事务+二阶段协议来实现，Seata 默认的解决方案
+++++[#LightGreen] TCC 模式
++++++[#Aquamarine]_ Try、Confirm、Cancel 三个词语的缩写
++++++[#Aquamarine]_ 把一个完整的业务逻辑拆分成三个阶段，然后通过事务管理器，
++++++[#Aquamarine]_ 在业务逻辑层面根据每个分支事务的执行情况，分别调用该业务的 Confirm 或者 Cancel 方法
+++++[#LightGreen] Saga 模式
++++++[#Aquamarine]_ SEATA 提供的长事务解决方案
++++++[#Aquamarine]_ 业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者
+++++[#LightGreen] XA 模式
++++++[#Aquamarine]_ 一种强一致性的事务解决方法
++++++[#Aquamarine]_ 利用事务资源（数据库、消息服务等）对 XA 协议的支持，以 XA 协议的机制来管理分支事务的一种事务模式



++[#yellow] 2

+++[#Pink] 3

++++[#MediumSpringGreen] 4
+++++[#LightGreen] 5
++++++[#Aquamarine] 6
+++++++[#Aquamarine]_ 7


'skywalking简单原理 https://www.jianshu.com/p/e29973236ffb


@endmindmap