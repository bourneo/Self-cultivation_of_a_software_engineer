		
		
MongoDB 笔记
		
		
	概念：
		database：数据库；
		collection：数据库表/集合；
		document：数据记录行/文档；
		field：数据字段/域；
		index：索引；
		primary key：主键，MongoDB 自动将 _id 字段设置为主键。
		
		
		
		
	windows 命令行：
		net stop MongoDB
		net start MongoDB
		
		
		
	
	常用操作：
			
		登陆：
			use admin
			db.auth("username","password")
		
		查看：
			查看当前数据库：
				db
			查看已有数据库：
				show dbs
			
			查看已有集合：
				show tables
				show collections
			
			查看已插入文档：
				db.collection.find()
				db.collection.find().pretty()
			
			
		创建：
			创建数据库：
				use databaseName
			创建集合：
				db.createCollection(name, options)
				例如：
					db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000})
		
			插入文档：
				db.collectionName.inset({x:y})
				db.col.save(document)
					如果不指定 _id 字段 save() 方法类似于 insert() 方法。
					如果指定 _id 字段，则会更新该 _id 的数据。
			
		更新：
			更新文档：
				db.collection.update(
				   <query>,
				   <update>,
				   {
					 upsert: <boolean>,
					 multi: <boolean>,
					 writeConcern: <document>
				   }
				)
				例如：
					db.collection.update({'title':'MongoDB 教程'},{$set:{'title':'MongoDB'}})
					以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。
			更新文档：
				db.collection.save(
				   <document>,
				   {
					 writeConcern: <document>
				   }
				)
				例如：
					db.collection.save({"_id" : ObjectId("56064f89ade2f21f36b03136"), "title" : "MongoDB"})
					
					
					
					
					
					
					

			
			
		删除：
		
			删除数据库：
				db.dropDatabase()
			删除集合：
				db.collection.drop()
			
			
		
	数据库：
		
		数据库命名：
			应全部小写。
		
		admin：
			从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。
			一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。
		local：
			这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合
		config：
			当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。	
		
	集合：
		MongoDB 文档组，没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，
		但通常情况下我们插入集合的数据都会有一定的关联性。
		
		capped collections：
			固定大小的 collection；
			高性能自动的维护对象的插入顺序，非常适合类似记录日志的功能，
			和标准的 collection 不同，你必须要显式的创建一个capped collection，
			指定一个 collection 的大小，单位是字节。
			collection 的数据存储空间值提前分配的。
			Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，
			所以当我们更新Capped collections 中文档的时候，
			更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。
			由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。
		
		
	文档：
		一组键值(key-value)对(即BSON)。
		MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，
		文档键命名：
			以下划线"_"开头的键是保留的(不是严格要求的)。
		
		
	元数据：
		数据库的信息是存储在集合中。
		它们使用了系统的命名空间：dbname.system.*
		
		
	数据类型：
		
		String	字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。
		Integer	整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。
		Boolean	布尔值。用于存储布尔值（真/假）。
		Double	双精度浮点值。用于存储浮点值。
		Min/Max keys	将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。
		Array	用于将数组或列表或多个值存储为一个键。
		Timestamp	时间戳。记录文档修改或添加的具体时间。
		Object	用于内嵌文档。
		Null	用于创建空值。
		Symbol	符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。
		Date	日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。
		Object ID	对象 ID。用于创建文档的 ID。
		Binary Data	二进制数据。用于存储二进制数据。
		Code	代码类型。用于在文档中存储 JavaScript 代码。
		Regular expression	正则表达式类型。用于存储正则表达式。
		
		ObjectId：
			ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes
			MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象
			由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，
			你可以通过 getTimestamp 函数来获取文档的创建时间:
				> var newObject = ObjectId()
				> newObject.getTimestamp()
				ISODate("2017-11-25T07:21:10Z")
			ObjectId 转为字符串
				> newObject.str
				5a1919e63df83ce79df8b38f
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		