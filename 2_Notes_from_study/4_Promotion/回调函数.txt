
回调函数












 一个简单的java回调函数的实现

	回调函数涉及的3个函数：
	
		登记回调函数；

		回调函数；

		响应回调函数。

	简单的解释
		你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话。过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个样例里，你的电话号码就叫回调函数。你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件。店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完成。来自知乎点击打开链接

	代码的实现
	
		首先有一个接口 interface CallBack,当然没有也是能够的，主要是用来预定义业务逻辑：
		
			public interface CallBack {
				// 响应回调函数
				public void slove();
			}

		然后是上面接口的实现，登记回调和响应回调的实现类

			public class A implements CallBack {
				B b = new B();
				// 响应回调函数
				// (non-Javadoc)
				// @see CallBack#slove()
				@Override
				public void slove() {
					System.out.println("the problem is solve!");
				}

				// 登记回调函数
				public void askQuestion(){
					System.out.println("ask b solve the problem!");
					// 自己去做其它事
					new Thread(new Runnable() {
						@Override
						public void run() {
							System.out.println("A want to do another thing!");
						}
					}).start();
					// ask b to solve this problem
					this.b.call(this);
				}

				// test
				 public static void main(String[] args)  {
					A a = new A();
					a.askQuestion();
				}
			}

		然后就是实现回调函数的类

			public class B {
				// 回调函数
				public void call(CallBack a){
					// b help a solve the priblem
					System.out.println("b help a solve the problem!");
					// call back
					a.slove();
				}
			}

	线程run()也是一个回调方法，当执行Thread的start（）方法就会回调这个run()方法，还有处理消息都比较经典等等













