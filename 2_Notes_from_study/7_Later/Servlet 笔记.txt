
Servlet 笔记


Servlet 核心

	是什么：
		处理 http 请求，生成动态网页，响应的技术；
	为什么使用：
		兼容性好；
	基本原理：
		生命周期：
			http 请求；
			服务器解析；
			创建实例：反射；
			初始化：init ( ) ；
			服务：service ( ) ；
			输出响应；
			响应完成；
			销毁：destroy ( )。
	怎么使用：
		继承 HttpServlet：
			HttpServletRequest；
			HttpServletResponce；
			HttpSession；
		

Servlet 小结

	Servlet 的映射路径
		精确匹配：
			url-pattern：				浏览器输入：
				/first						http：//localhost：8080/day10/first
				/itc/demo1				http：//localhost：8080/day10/itc/demo1
		模糊匹配：
			url-pattern：				浏览器输入：
				/* 							http：//localhost：8080/day10/任意路径
				/itc/*						http：//localhost：8080/day10/itc/任意路径
				*. 后缀名					http：//localhost：8080/day10/任意路径.do
					*.do
					*.action
					*.html (伪静态) 
	servlet 缺省路径
		缺省路径 (<url-pattern>/</url-pattern>) ：
			是在 tomcat 服务器内置的一个路径；该路径对应的是一个 DefaultServlet (缺省 Servlet) ；
		缺省 Servlet 的作用：用于解析 web 应用的静态资源文件。
			问题：URL 输入 http：//localhost：8080/day10/index.html 如何读取文件。
				先找动态资源，再找静态资源。
	
	Sevlet 生命周期
			servlet 类对象什么时候创建，什么时候调用什么方法，什么时候销毁。
			以前的对象：new Student () ； stu.study () ； stu=null；
		Servlet 程序的生命周期由 tomcat 服务器控制。
	Servlet 生命周期的方法：
		构造方法：
			创建 servlet 对象时调用；只调用 1 次；
			默认情况下，第一次访问 servlet 时创建 servlet 对象； 
			证明 servlet 对象在 tomcat 是单实例的。
		init () ：		创建完 servlet 对象时调用，只调用 1 次；
		service () ：	每次发出请求时调用，调用 n 次。
		destroy () ：	销毁 servlet 对象时调用，停止服务器或者重新部署 web 应用时销毁 servlet，只调用 1 次。
	伪代码演示 servlet 生命周期：
		1)	通过映射找到到 servlet-class 的内容，字符串：gz.itc.a_servlet.FirstServlet；
		2)	通过反射构造 FirstServlet 对象；
			得到字节码对象：
				Class clazz = class.forName ("gz.itc.a_servlet.FirstServlet") ；
			调用无参数的构造方法来构造对象：
				Object obj = clazz.newInstance () ； 				1.servlet 的构造方法被调用；
		3)	通过反射调用 init 方法，创建 ServletConfig 对象，；
			得到方法对象：
				Method m = clazz.getDeclareMethod ("init"，ServletConfig.class) ；
			调用方法：
				m.invoke (obj，config) ； 								2.servlet 的 init 方法被调用；
		4)	通过反射调用 service 方法，创建 request，response 对象；
			得到方法对象：
				Methodm m =clazz.getDeclareMethod ("service"，
				HttpServletRequest.class，HttpServletResponse.class) ；
			调用方法：
				m.invoke (obj，request，response) ； 			3.servlet 的 service 方法被调用；
		5)	通过反射调用 destroy 方法，当 tomcat 服务器停止或 web 应用重新部署；
			得到方法对象：
				Method m = clazz.getDeclareMethod ("destroy"，null) ；
			调用方法：
				m.invoke (obj，null) ；									4.servlet 的 destroy 方法被调用。
	
	Servlet 的自动加载
		servlet 创建对象的时间：第一次访问 servlet 时，创建 servlet 对象 (默认情况) ；
		改变 servlet 创建对象的时机：把 servlet 创建对象的时间提前到加载 web 应用时。
		在 servlet 的配置信息中，加上一个<load-on-startup>：
			让 servlet 对象自动加载：<load-on-startup>1</load-on-startup>
			注意：整数值越大，创建优先级越低。
	
	Servlet 的多线程并发问题
		servlet 对象在 tomcat 服务器是单实例多线程的。
			当多个 servlet 的线程同时访问了 servlet 的共享数据 (如：成员变量) 时，可能会引发线程安全问题。
		解决办法：
			1)	把使用到共享数据的代码块进行同步 (使用 synchronized 关键字进行同步) ；
			2)	建议在 servlet 类中尽量不要使用成员变量；
				如果确实要使用成员，必须同步；
				尽量缩小同步代码块的范围 (哪用到成员变量就同步哪) ，避免因同步而导致并发效率降低。
		Servlet 学习：
			HttpServletRequest 对象：		获取请求信息；
			HttpServletResponse 对象：	设置响应对象；
			ServletConfig 对象：			servlet 配置对象；
			ServletContext 对象：			servlet 的上下文对象。
	
	ServletConfig 对象
		ServletConfig 对象的作用：
			用于加载 servlet 的初始化参数；
			在一个 web 应用可以存在多个 ServletConfig 对象 (一个 Servlet 对应一个 ServletConfig 对象) 。
		对象创建和得到：
			创建时机：	在创建完 servlet 对象之后，在调用 init 方法之前创建；
			得到对象：	直接从有参数的 init 方法中得到。
		ServletConfig 的 API：
			java.lang.String：getInitParameter (java.lang.String name) ：	根据参数名获取参数值；
			java.util.Enumeration：getInitParameterNames () ：			获取所有参数；
			ServletContext getServletContext () ：							得到 servlet 上下文对象；
			java.lang.String getServletName () ：							得到 servlet 的名称。
	
	ServletContext 对象
		ServletContext 对象：
			Servlet 的上下文对象；表示当前的 web 应用环境。
			一个 web 应用中只有一个 ServletContext 对象。
		对象创建和得到：
			创建时机：	加载 web 应用时，创建 ServletContext 对象；
			得到对象：	从 ServletConfig 对象的 getServletContext 方法得到。
		ServletContext 域对象：
			作用范围：	整个 web 应用中有效；
			保存数据：	void setAttribute (java.lang.String name，java.lang.Object object) ；
			获取数据：	java.lang.Object getAttribute (java.lang.String name) ；
			删除数据：	void removeAttribute (java.lang.String name) 。
		域对象：
			用于保存数据，获取数据；可以在不同的动态资源之间共享数据。
		所有域对象：
			HttpServletRequet		域对象；
			HttpSession				域对象；
			ServletContext			域对象；
			PageContext				域对象。
		转发：
			RequestDispatcher：getRequestDispatcher (java.lang.String path) ；
	
	转发与重定向：
		转发：
			1)	地址栏不会改变；
			2)	只能转发到当前 web 应用内的资源；
			3)	可以在转发过程中，把数据保存到 request 域对象中；
		重定向：
			1)	地址栏会改变，变成重定向到地址；
			2)	重定向可以跳转到当前 web 应用，或其他 web 应用，甚至是外部域名网站；
			3)	不能在重定向的过程，把数据保存到 request 中。
		注意：如果要使用 request 域对象进行数据共享，只能用转发。




