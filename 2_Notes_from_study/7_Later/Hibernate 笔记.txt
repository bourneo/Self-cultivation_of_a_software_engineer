
Hibernate 笔记


Hibernate 核心

	是什么：
		
	为什么使用：
		
	基本原理：
		
	怎么使用：
		HQL；
		



优化 Hibernate 所鼓励的 7 大措施：
	1. 尽量使用 many-to-one，避免使用单项 one-to-many
	2. 灵活使用单向 one-to-many
	3. 不用一对一，使用多对一代替一对一
	4. 配置对象缓存，不使用集合缓存
	5. 一对多使用 Bag 多对一使用 Set
	6. 继承使用显示多态 HQL:from object polymorphism="exlicit" 避免查处所有对象
	7. 消除大表，使用二级缓存

	Hibernate 鼓励使用双向一对多关联，不使用单向一对多关联。
	单向一对多关联映射是在 one 端维护关系的，必须先保存 many 端后才可以保存 one 端，所以在保存 many 端时，该端不知道 one 端是否存在相应的数据，所以只能将维护的关系字段设置为 null，如果为非空则无法保存。
	因为是 one 端维护关系，所以在保存 one 端时，会发出多余的 update 语句维护 many 端的外键关系。
	
	
Hibernate 体系结构与工作原理

	1.Hibernate 的初始化.
		读取 Hibernate 的配置信息-〉创建 Session Factory
		1) 创建 Configeration 类的实例。
			它的构造方法：将配置信息 (Hibernate config.xml) 读入到内存。
			一个 Configeration 实例代表 Hibernate 所有 Java 类到 Sql 数据库映射的集合。
		2) 创建 SessionFactory 实例
			把 Configeration 对象中的所有配置信息拷贝到 SessionFactory 的缓存中。
			SessionFactory 的实例代表一个数据库存储员源，创建后不再与 Configeration 对象关联。
			缓存 (cache):指 Java 对象的属性 (通常是一些集合类型的属性－－占用内存空间。
			SessionFactory 的缓存中：Hibernate 配置信息。O\R 映射元数据。
			缓存－大：重量级对象 小：轻量级对象
		3) 调用 SessionFactory 创建 Session 的方法
			1) 用户自行提供 JDBC 连接。
			Connection con=dataSource.getConnection();
			Session s=sessionFactory.openSession(con);
			2) 让 SessionFactory 提供连接
			Session s=sessionFactory.openSession();
		4) 通过 Session 接口提供的各种方法来操纵数据库访问。
			Hibernate 的缓存体系
			一级缓存：
			Session 有一个内置的缓存，其中存放了被当前工作单元加载的对象。
			每个 Session 都有自己独立的缓存，且只能被当前工作单元访问。
			二级缓存：
			SessionFactory 的外置的可插拔的缓存插件。其中的数据可被多个 Session 共享访问。
			SessionFactory 的内置缓存：存放了映射元数据，预定义的 Sql 语句。

Hibernate 中 Java 对象的状态
	1. 临时状态 (transient)
		特征：
			1) 不处于 Session 缓存中
			2) 数据库中没有对象记录
		Java 如何进入临时状态
			1) 通过 new 语句刚创建一个对象时
			2) 当调用 Session 的 delete() 方法，从 Session 缓存中删除一个对象时。

	2. 持久化状态 (persisted)
		特征：
			1) 处于 Session 缓存中
			2) 持久化对象数据库中设有对象记录
			3) Session 在特定时刻会保持二者同步
		Java 如何进入持久化状态
			1) Session 的 save() 把临时－》持久化状态
			2) Session 的 load(),get() 方法返回的对象
			3) Session 的 find() 返回的 list 集合中存放的对象
			4) Session 的 update(),saveOrupdate() 使游离－》持久化
	3. 游离状态 (detached)
		特征：
			1) 不再位于 Session 缓存中
			2) 游离对象由持久化状态转变而来，数据库中可能还有对应记录。
		Java 如何进入持久化状态－》游离状态
			1) Session 的 close() 方法
			2) Session 的 evict() 方法，从缓存中删除一个对象。提高性能。少用。




