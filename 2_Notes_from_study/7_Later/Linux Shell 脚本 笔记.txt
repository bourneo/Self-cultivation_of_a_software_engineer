
Shell 


Bash
	Bourne Again Shell（/bin/bash）


	#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。

	chmod +x file 加上执行权限，否则会提示无执行权限。


shell 和 shell 脚本：

	shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。

	shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。由于习惯的原因，简洁起见，本文出现的 "shell编程" 都是指 shell 脚本编程

运行 Shell 脚本有两种方法：

1、作为可执行程序

	将上面的代码保存为 test.sh，并 cd 到相应目录：
		chmod +x ./test.sh  #使脚本具有执行权限
		./test.sh  #执行脚本
	./test.sh 告诉系统说，就在当前目录找。
	 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的

2、作为解释器参数

	这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：
		/bin/sh test.sh
		/bin/php test.php
	这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。

格式：

	#!/bin/sh
	#comments
	Your commands go here

实例：
	#!/bin/sh
	cd ~
	mkdir shell_tut
	cd shell_tut

	for ((i=0; i<10; i++)); do
	    touch test_$i.txt
	done
	
实例解析：
	第1行：指定脚本解释器，这里是用/bin/sh做解释器的
	第2行：切换到当前用户的home目录
	第3行：创建一个目录shell_tut
	第4行：切换到shell_tut目录
	第5行：循环条件，一共循环10次
	第6行：创建一个test_1…10.txt文件
	第7行：循环体结束
	cd, mkdir, touch都是系统自带的程序，一般在/bin或者/usr/bin目录下。
	for, do, done是sh脚本语言的关键字。


变量分类：

Shell变量有这几类：本地变量、环境变量、局部变量、位置变量、特殊变量。

本地变量：
	只对当前shell进程有效的，对当前进程的子进程和其它shell进程无效。
	定义：VAR_NAME=VALUE
	变量引用：${VAR_NAME} 或者 $VAR_NAME
	取消变量：unset VAR_NAME
	相当于java中的私有变量(private)，只能当前类使用，子类和其他类都无法使用。

环境变量：
	自定义的环境变量对当前shell进程及其子shell进程有效，对其它的shell进程无效
	定义：export VAR_NAME=VALUE
	对所有shell进程都有效需要配置到配置文件中

局部变量：
	在函数中调用，函数执行结束，变量就会消失
	对shell脚本中某代码片段有效
	定义：local VAR_NAME=VALUE
	相当于java代码中某一个方法中定义的局部变量，只对这个方法有效。

位置变量：
	比如脚本中的参数：
		$0：脚本自身
		$1：脚本的第一个参数
		$2：脚本的第二个参数
		相当于java中main函数中的args参数，可以获取外部参数。

特殊变量：
	$?：接收上一条命令的返回状态码
	返回状态码在0-255之间
	$#：参数个数
	$*：或者$@：所有的参数
	$$：获取当前shell的进程号（PID）(可以实现脚本自杀)(或者使用exit命令直接退出也可以使用exit [num])

引号
	Shell编程中有三类引号：单引号、双引号、反引号。
	''单引号不解析变量
		[java] view plain copy
		echo '$name'  
	""双引号会解析变量
		[java] view plain copy
		echo "$name"  
	``反引号是执行并引用一个命令的执行结果，类似于$(...)
		[java] view plain copy
		echo `$name`  


 
流程控制语句语法：

	if …; then
	…
	elif …; then
	…
	else
	…
	fi

	与其他语言不同，Shell Script中if语句的条件部分要以分号来分隔。
	
[]表示条件测试，常用的条件测试：

	[ -f "$file" ] 判断$file是否是一个文件

	[ $a -lt 3 ] 判断$a的值是否小于3，同样-gt和-le分别表示大于或小于等于

	[ -x "$file" ] 判断$file是否存在且有可执行权限，同样-r测试文件可读性

	[ -n "$a" ] 判断变量$a是否有值，测试空串用-z

	[ "$a" = "$b" ] 判断$a和$b的取值是否相等

	[ cond1 -a cond2 ] 判断cond1和cond2是否同时成立，-o表示cond1和cond2有一成立

	注意条件测试部分中的空格。在方括号的两侧都有空格，在-f、-lt、=等符号两侧同样也有空格。
	
Shell Script中的循环有下面几种格式：

	while [ cond1 ] && { || } [ cond2 ] …; do
	…
	done

	for var in …; do
	…
	done

	for (( cond1; cond2; cond3 )) do
	…
	done

	until [ cond1 ] && { || } [ cond2 ] …; do
	…
	done
	



