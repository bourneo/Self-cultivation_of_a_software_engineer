
数据结构

	常见的数据结构：数组、栈、队列、链表、哈希表、图、树、堆。
	
		数组：最简单的数据结构。
		
		Array
		
		ArrayList 

		LinkedList 链表

		Queue 单向队列

		Deque 双向队列

		Stack 栈

		Hashtable 哈希表



Java 数据结构

	数组
		无序数组
			增：元素；依次赋值，添加数据，增加长度；
			删：元素；实际上时重新做赋值；
			改：元素；传入索引和新值；
			查：元素，顺序；传入索引或者数值。
			转换成字符串：拼接；
			属性：
				数组长度：elements。
		有序数组
			增：遍历到大于等于数组元素的索引；
				然后依次赋值，添加数据，增加长度。
			查：二分查找法；根据元素查索引。
			属性：
				数组长度：elements。
		
		二维数组
			第一个中括号中必须要有值，它代表的是在该二维数组中有多少个一维数组。
		
	栈
		先进后出；
		属性：
			栈顶：top。

	队列
		先进先出；
		属性：
			队列长度：elements；
			队列前端：front；
			队列末端：end。
		循环队列
			当 end == arr.length - 1；把 end 重新设为 - 1；
			当 front==arr.length；把 front 重新设为 0。
			属性：
				队列长度：elements；
				队列前端：front；
				队列末端：end。
			
	链表
		链表属性：
			结点：node；
				数据：data；
				下一个结点的地址：next；
			单链：LinkedList
				头结点的地址：first；
				
		双端链表
			带尾结点的单向链表；
			属性：
				结点：node；
					数据：data；
					下一个结点的地址：next；
				单链：LinkedList
					头结点的地址：first；
					尾结点的地址：last；
		
		双向链表
			结点保存对下一个和上一个结点的引用。
			属性：
				结点：node；
					数据：data；
					上一个结点的地址：previous；
					下一个结点的地址：next；
				双链：DoubleLinkedList
					头结点的地址：first；
					尾结点的地址：last；
	
	哈希表
		哈希表
			基于数组实现；
			提供快速插入操作和查找操作。
		哈希化
			直接将关键字作为索引；
			将单词转换成索引；
				将字幕转换成ASCII 码，然后进行相加。
				幂的连乘；
				压缩可选值；
			压缩后并不能保证每个数据都映射到数组中的空白单元。
				解决方法：
					开放地址法；
					链地址法。
		哈希函数求哈希值的方式
			开放地址法
				当冲突发生，不再用哈希值作为数组的下标；
				通过查找数组的其他空位，并将数据填入。
					如果哈希值对应的单元已经不为空；
						插入操作需要先对哈希值进行递加；
						查找和删除也许要递加至关键字相等。
			链地址法
				在哈希表的每个单元中设置链表，
					数据项本身插入到单元链表中。 
	
	树
		基本概念
			有序数组增删数据慢；
			链表改查数据慢；
			属性：
				结点；根结点，父结点，子结点，叶子结点，
				路径：边；
				子树：每个结点都可以作为一个子树的根。
				深度：层；
				访问结点：
					在结点上进行了一些操作；
					不同于经过结点；
		二叉树
			树的每个结点最多只有两个子结点的树。
			属性：
				结点：
					数据：data；一个结点可以存储多个数据。
					左子结点：leftChild；
					右子结点：rightChild；
				树：
					根结点：root；
	
	图
		基本概念
			邻接
				如果两个顶点被同一条边连接，则这两个顶点邻接。
			路径
				从一个顶点到另一个顶点经过的边的序列。
			连通图
				至少有一条路径可以连接所有的顶点。
				反之就是非连通图。
			有向图
				边有方向图，有方向的边被称为弧。
			带权图
				边被赋予权值的图。
		图的属性
			顶点
				顶点数组；
				顶点标识。
			邻接
				邻接表：数组链表；
				矩阵：n x n 矩阵表示是否邻接。




