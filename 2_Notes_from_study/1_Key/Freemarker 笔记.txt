
Freemarker


小结
	Freemarker 实现网页静态化；Freemarker 整合 spring。
		1) Freemarker 导包；
		2) 创建模板；
		3) 使用 freemarker 生成静态页面。

Freemarker
	FreeMarker 是一个用 Java 语言编写的模板引擎，它基于模板来生成文本输出。
	FreeMarker 与 Web 容器无关，即在 Web 运行时，它并不知道 Servlet 或 HTTP。
		它不仅可以用作表现层的实现技术，而且还可以用于生成 XML，JSP 或 Java 等。
		目前企业中：主要用 Freemarker 做静态页面或是页面展示

	使用方法：
		把 Freemarker 的 jar 包添加到工程中
	具体步骤：
		第一步：创建一个 Configuration 对象，直接 new 一个对象。构造方法的参数就是 freemarker 对于的版本号。
		第二步：设置模板文件所在的路径。
		第三步：设置模板文件使用的字符集。一般就是 utf-8.
		第四步：加载一个模板，创建一个模板对象。
		第五步：创建一个模板使用的数据集，可以是 pojo 也可以是 map。一般是 Map。
		第六步：创建一个 Writer 对象，一般创建一 FileWriter 对象，指定生成的文件名。
		第七步：调用模板对象的 process 方法输出文件。
		第八步：关闭流。

	模板：${hello}
		@Test
		public void genFile() throws Exception {
			// 第一步：创建一个 Configuration 对象，直接 new 一个对象。构造方法的参数就是 freemarker 对于的版本号。
			Configuration configuration = new Configuration(Configuration.getVersion());
			// 第二步：设置模板文件所在的路径。
			configuration.setDirectoryForTemplateLoading(new File("D：/workspaces-itcast/term197/taotao-item-web/src/main/webapp/WEB-INF/ftl"));
			// 第三步：设置模板文件使用的字符集。一般就是 utf-8.
			configuration.setDefaultEncoding("utf-8");
			// 第四步：加载一个模板，创建一个模板对象。
			Template template = configuration.getTemplate("hello.ftl");
			// 第五步：创建一个模板使用的数据集，可以是 pojo 也可以是 map。一般是 Map。
			Map dataModel = new HashMap<>();
			//向数据集中添加数据
			dataModel.put("hello"，"this is my first freemarker test.");
			// 第六步：创建一个 Writer 对象，一般创建一 FileWriter 对象，指定生成的文件名。
			Writer out = new FileWriter(new File("D：/temp/term197/out/hello.html"));
			// 第七步：调用模板对象的 process 方法输出文件。
			template.process(dataModel，out);
			// 第八步：关闭流。
			out.close();
		}







		
		
		
	模板的语法
		访问 map 中的 key：
			${key}

		访问 pojo 中的属性：
			如 Student 对象的学号、姓名、年龄；
			${key.property}
		
		取集合中的数据：
			<#list studentList as student>
				${student.id}/${studnet.name}
			</#list>
			循环使用格式：
				<#list 要循环的数据 as 循环后的数据>
				</#list>
		
		取循环中的下标：
			<#list studentList as student>
				${student_index}
			</#list>

		判断：
			<#if student_index % 2 == 0>
			<#else>
			</#if>

		日期类型格式化：
			直接取值：${date}(date 是属性名) 如果传来的是一个 Date 型数据会报错；
				${date?date} 2016-9-13 ：当前日期；
				${date?time} 17：53：55 ：当前时间；
				${date?datetime} 2016-9-13 17：53：55 自定义时间和日期。

		Null 值的处理：
			如果直接取一个不存在的值 (值为 null) 时会报异常
				${aaa}
			处理： ${aaa!”默认值”} 或者 ${aaa! } 代表空字符串

		Include 标签：
			<#include“模板名称”> (相当于 jstl 中的包含)

	整合 spring 的配置文件
		<bean id="freemarkerConfig"
			class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
			<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
			<property name="defaultEncoding" value="UTF-8" />
		</bean>

	商品详情页面静态化
		网页的静态化方案：
			输出文件的名称：商品 id+“.html”
			输出文件的路径：工程外部的任意目录。
			网页访问：使用 nginx 访问网页。在此方案下 tomcat 只有一个作用就是生成静态页面。
			工程部署：可以把 taotao-item-web 部署到多个服务器上。
			生成静态页面的时机：商品添加后，生成静态页面。可以使用 Activemq，订阅 topic (商品添加) 
		Freemaker 生成静态页面的时机：
			添加商品后使用 activemq 广播消息，freemaker 监听到消息去数据库查询商品生成静态页面。
		为什么不去 redis 中获取商品信息：
			添加商品时还没有存到 redis 中
		为什么不直接使用商品信息还要到数据库中查询：
			不在一个项目中传输数据麻烦，也起不到提高效率的作用;而且修改数据时也要修改静态页面




FreeMarker 代码生成器

	1, 为什么要有代码生成器:在模块中, 大部分的模块的基本操作都是一样的 CRUD, 而这些 CRUD 的基本代码又是差不多的, 所以, 我们想写一个程序, 通过传入一个 domain, 然后根据这个 domain 相关的信息, 生成这个 domain 对应的 dao,daoimpl, 映射文件,service,serviceimpl,action,list.jsp,input.jsp, 生成相关的配置文件;
	2, 怎么做?

	FreeMarker(一种通用的模板技术):
	提供给我们:
	1, 提供给我们一套通用的模板语言;
	2, 提供给我们一套基本 API, 我们可以很方便的使用这套 API, 传入模型, 找到模板, 合成内容, 输出结果;


	1，FreeMarker 中的模型概念：
		1，hash：目录角色的对象 (比如 map, 包含简单属性的对象) 
		2，scalars：存储单一的值 (比如 String，int，Date 等) 
		3，sequence：存储有序变量的容器 (比如数组和 List 等) 
	2，模板语言概念：
		1，插值：${}，Freemarker 会替换 {} 中的值；
		2，FTL 标签：具有一定逻辑含义，Freemarker 会按照标签解析执行；
		3，注释：<#-- -->
		4，标准文本：除了插值，FTL 标签和注释，其他文本 Freemarker 会原样输出；

	3，插值的使用：
		1，直接输出 scalars；${userName},${user.userName}
			注意, 在 freemarker 中, 如果直接使用插值${} 来显示一个内容, 都必须要求这个内容存在, 如果显示的内容为 null, 或者在上下文中就找不到这个对象或者在对象中找不到这个属性, 报错;

		2，处理不存在的 scalars 值：
			1,${something!"nothing"}:如果 something 这个属性为空, 就使用 nothing 来代替;${something!""},${number!""}

		3，输出 hash 中的属性；
			${obj.someProperty.someProperty}
			${map.someKey} 
			注意, 如果在点的过程中, 任何一个属性为空或者找不到, 都会报错; 

		4，输出 hash 中的方法；
			${obj.someMethod()};
				 
		5，处理不存在的 hash 调用：
			${obj.someProperty.someProperty!"defaultValue"}:这样写, 只代表最后一个 someProperty 可以为空;
			${(obj.prop.something)!nothing}

		6，处理 scalars 的内建函数：${str?substring(2)} 等
			注意, 在 EL 表达式中, 对于简单的值 String,Date,Integer 类型的值, 我们也可以直接调用或者访问这些值的方法或者属性,${someString.subString(1)};
			但是, 在 Freemarker 中, 是不能直接调用简单值的方法的;只能使用 freemarker 给我们内建的一些简单值的方法;

			所以, 一般来说, 如果页面上出现了需要对对象的某个简单值做一些复杂操作的话, 都直接写在后台;

	4，简单的指令使用：
		1，<#if condition>..<#elseif condition>..<#else>..</#if>
			1,condition 必须是一个 boolean 表达式; < > != == ==null
			2, 判断一个对象是否存在:
				<#if something??>:判断 something 是否存在 (如果 something 本来就是一个 boolean 值), 如果存在表达式返回 true;
				<#if obj.someProp.something??>:仅仅只是判断最后一个 something 是否为 true 或者是否为 null, 或者是否存在;
				<#if (obj.someProp.something)??>:如果这个遍历过程中, 有任何一个属性不存在, 返回 false;
										
		2，<#list sequence as item>..</#list>
			<s:iterator value="sequence" var="item">
				${item}
			</s:iterator>






