
FreeMarker

代码生成器

1,为什么要有代码生成器:在模块中,大部分的模块的基本操作都是一样的CRUD,而这些CRUD的基本代码又是差不多的,所以,我们想写一个程序,通过传入一个domain,然后根据这个domain相关的信息,生成这个domain对应的dao,daoimpl,映射文件,service,serviceimpl,action,list.jsp,input.jsp,生成相关的配置文件;
2,怎么做?

FreeMarker(一种通用的模板技术):
提供给我们:
1,提供给我们一套通用的模板语言;
2,提供给我们一套基本API,我们可以很方便的使用这套API,传入模型,找到模板,合成内容,输出结果;


1，FreeMarker中的模型概念：
	1，hash：目录角色的对象（比如map,包含简单属性的对象）
	2，scalars：存储单一的值（比如String，int，Date等）
	3，sequence：存储有序变量的容器（比如数组和List等）
2，模板语言概念：
	1，插值：${}，Freemarker会替换{}中的值；
	2，FTL标签：具有一定逻辑含义，Freemarker会按照标签解析执行；
	3，注释：<#-- -->
	4，标准文本：除了插值，FTL标签和注释，其他文本Freemarker会原样输出；

3，插值的使用：
	1，直接输出scalars；${userName},${user.userName}
				注意,在freemarker中,如果直接使用插值${}来显示一个内容,都必须要求这个内容存在,如果显示的内容为null,或者在上下文中就找不到这个对象或者在对象中找不到这个属性,报错;

	2，处理不存在的scalars值：
				1,${something!"nothing"}:如果something这个属性为空,就使用nothing来代替;${something!""},${number!""}

	3，输出hash中的属性；
				${obj.someProperty.someProperty}
				${map.someKey}               
				注意,如果在点的过程中,任何一个属性为空或者找不到,都会报错;                 

	4，输出hash中的方法；
				${obj.someMethod()};
               
	5，处理不存在的hash调用：
				 ${obj.someProperty.someProperty!"defaultValue"}:这样写,只代表最后一个someProperty可以为空;
				 ${(obj.prop.something)!nothing}

	6，处理scalars的内建函数：${str?substring(2)}等
				   注意,在EL表达式中,对于简单的值String,Date,Integer类型的值,我们也可以直接调用或者访问这些值的方法或者属性,${someString.subString(1)};
				  但是,在Freemarker中,是不能直接调用简单值的方法的;只能使用freemarker给我们内建的一些简单值的方法;

				  所以,一般来说,如果页面上出现了需要对对象的某个简单值做一些复杂操作的话,都直接写在后台;

4，简单的指令使用：
		1，<#if condition>..<#elseif condition>..<#else>..</#if>
					1,condition必须是一个boolean表达式; < >  != ==  ==null
					2,判断一个对象是否存在:
						<#if something??>:判断something是否存在(如果something本来就是一个boolean值),如果存在表达式返回true;
						<#if obj.someProp.something??>:仅仅只是判断最后一个something是否为true或者是否为null,或者是否存在;
						<#if (obj.someProp.something)??>:如果这个遍历过程中,有任何一个属性不存在,返回false;
                                        
		2，<#list sequence as item>..</#list>
                                     






                                 <s:iterator value="sequence" var="item">
                                                ${item}
                                </s:iterator>



