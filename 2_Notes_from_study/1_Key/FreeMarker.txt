
FreeMarker

代码生成器

1, 为什么要有代码生成器:在模块中, 大部分的模块的基本操作都是一样的 CRUD, 而这些 CRUD 的基本代码又是差不多的, 所以, 我们想写一个程序, 通过传入一个 domain, 然后根据这个 domain 相关的信息, 生成这个 domain 对应的 dao,daoimpl, 映射文件,service,serviceimpl,action,list.jsp,input.jsp, 生成相关的配置文件;
2, 怎么做?

FreeMarker(一种通用的模板技术):
提供给我们:
1, 提供给我们一套通用的模板语言;
2, 提供给我们一套基本 API, 我们可以很方便的使用这套 API, 传入模型, 找到模板, 合成内容, 输出结果;


1，FreeMarker 中的模型概念：
	1，hash：目录角色的对象 (比如 map, 包含简单属性的对象) 
	2，scalars：存储单一的值 (比如 String，int，Date 等) 
	3，sequence：存储有序变量的容器 (比如数组和 List 等) 
2，模板语言概念：
	1，插值：${}，Freemarker 会替换 {} 中的值；
	2，FTL 标签：具有一定逻辑含义，Freemarker 会按照标签解析执行；
	3，注释：<#-- -->
	4，标准文本：除了插值，FTL 标签和注释，其他文本 Freemarker 会原样输出；

3，插值的使用：
	1，直接输出 scalars；${userName},${user.userName}
				注意, 在 freemarker 中, 如果直接使用插值${} 来显示一个内容, 都必须要求这个内容存在, 如果显示的内容为 null, 或者在上下文中就找不到这个对象或者在对象中找不到这个属性, 报错;

	2，处理不存在的 scalars 值：
				1,${something!"nothing"}:如果 something 这个属性为空, 就使用 nothing 来代替;${something!""},${number!""}

	3，输出 hash 中的属性；
				${obj.someProperty.someProperty}
				${map.someKey} 
				注意, 如果在点的过程中, 任何一个属性为空或者找不到, 都会报错; 

	4，输出 hash 中的方法；
				${obj.someMethod()};
 
	5，处理不存在的 hash 调用：
				 ${obj.someProperty.someProperty!"defaultValue"}:这样写, 只代表最后一个 someProperty 可以为空;
				 ${(obj.prop.something)!nothing}

	6，处理 scalars 的内建函数：${str?substring(2)} 等
				 注意, 在 EL 表达式中, 对于简单的值 String,Date,Integer 类型的值, 我们也可以直接调用或者访问这些值的方法或者属性,${someString.subString(1)};
				 但是, 在 Freemarker 中, 是不能直接调用简单值的方法的;只能使用 freemarker 给我们内建的一些简单值的方法;

				 所以, 一般来说, 如果页面上出现了需要对对象的某个简单值做一些复杂操作的话, 都直接写在后台;

4，简单的指令使用：
		1，<#if condition>..<#elseif condition>..<#else>..</#if>
					1,condition 必须是一个 boolean 表达式; < > != == ==null
					2, 判断一个对象是否存在:
						<#if something??>:判断 something 是否存在 (如果 something 本来就是一个 boolean 值), 如果存在表达式返回 true;
						<#if obj.someProp.something??>:仅仅只是判断最后一个 something 是否为 true 或者是否为 null, 或者是否存在;
						<#if (obj.someProp.something)??>:如果这个遍历过程中, 有任何一个属性不存在, 返回 false;
 
		2，<#list sequence as item>..</#list>
 






 <s:iterator value="sequence" var="item">
 ${item}
 </s:iterator>



