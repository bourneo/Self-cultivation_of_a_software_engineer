
Solr 索引库


Solr 核心

	是什么：
		
	为什么使用：
		
	基本原理：
		
	怎么使用：
		IKAnalyzer
		
		Spring 配置
	
小结
	Solr 搜索服务器；作为站内搜索服务器，实现搜索功能。
	SolrJ 索引库管理；实现索引库的增删改查操作。
	SolrCloud 搜索服务器集群；使用 Zookeeper 作为集群的配置信息中心，实现分布式索引和检索。
	
	SolrCloud 实现：
		Zookeeper 集群；
		Solr 集群。
	使用 SolrJ 连接集群；
		CloudSolrServer 对象连接集群。

Solr 
	Solr 搜索服务器；作为站内搜索服务器，实现搜索功能。
	Solr 的环境
		Solr 是 java 开发。
		需要安装 jdk。
		安装环境 Linux。
		需要安装 Tomcat。
	搭建步骤
		第一步：把 solr 的压缩包上传到 Linux 系统
		第二步：解压 solr。
		第三步：安装 Tomcat，解压缩即可。
		第四步：把 solr 部署到 Tomcat 下。
		第五步：解压缩 war 包。启动 Tomcat 解压。
		第六步：把/root/solr-4.10.3/example/lib/ext 目录下的所有的 jar 包，添加到 solr 工程中。
			[root@localhost ext]# pwd
			/root/solr-4.10.3/example/lib/ext
			[root@localhost ext]# cp * /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/
		第七步：创建一个 solrhome。/example/solr 目录就是一个 solrhome。复制此目录到/usr/local/solr/solrhome
			[root@localhost example]# pwd
			/root/solr-4.10.3/example
			[root@localhost example]# cp -r solr /usr/local/solr/solrhome
			[root@localhost example]# 
		第八步：关联 solr 及 solrhome。需要修改 solr 工程的 web.xml 文件。
		第九步：启动 Tomcat。http://192.168.25.154:8080/solr/

	
实例
	配置业务域：
		schema.xml 中定义
			1、商品 Id
			2、商品标题
			3、商品卖点
			4、商品价格
			5、商品图片
			6、分类名称
			7、商品描述
	创建对应的业务域。需要制定中文分析器。
		创建步骤：
			第一步：把中文分析器添加到工程中。
				1、把 IKAnalyzer2012FF_u1.jar 添加到 solr 工程的 lib 目录下
				2、把扩展词典、配置文件放到 solr 工程的 WEB-INF/classes 目录下。
			第二步：配置一个 FieldType，制定使用 IKAnalyzer
				修改 schema.xml 文件
				修改 Solr 的 schema.xml 文件，添加 FieldType：
				<fieldType name="text_ik" class="solr.TextField">
				 <analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/>
				</fieldType>
			第三步：配置业务域，type 制定使用自定义的 FieldType。
				设置业务系统 Field
				<field name="item_title" type="text_ik" indexed="true" stored="true"/>
				<field name="item_sell_point" type="text_ik" indexed="true" stored="true"/>
				<field name="item_price" type="long" indexed="true" stored="true"/>
				<field name="item_image" type="string" indexed="false" stored="true" />
				<field name="item_category_name" type="string" indexed="true" stored="true" />
				<field name="item_desc" type="text_ik" indexed="true" stored="false" />

				<field name="item_keywords" type="text_ik" indexed="true" stored="false" multiValued="true"/>
				<copyField source="item_title" dest="item_keywords"/>
				<copyField source="item_sell_point" dest="item_keywords"/>
				<copyField source="item_category_name" dest="item_keywords"/>
				<copyField source="item_desc" dest="item_keywords"/>
			第四步：重启 tomcat


SolrJ 
	SolrJ 索引库管理；实现索引库的增删改查操作。
	添加文档：
		第一步：把 solrJ 的 jar 包添加到工程中。
		第二步：创建一个 SolrServer，使用 HttpSolrServer 创建对象。
		第三步：创建一个文档对象 SolrInputDocument 对象。
		第四步：向文档中添加域。必须有 id 域，域的名称必须在 schema.xml 中定义。
		第五步：把文档添加到索引库中。
		第六步：提交。
	删除文档：
		根据 id 删除：
		第一步：创建一个 SolrServer 对象。
		第二步：调用 SolrServer 对象的根据 id 删除的方法。
		第三步：提交。
	查询索引库
		查询步骤：
			第一步：创建一个 SolrServer 对象
			第二步：创建一个 SolrQuery 对象。
			第三步：向 SolrQuery 中添加查询条件、过滤条件。。。
			第四步：执行查询。得到一个 Response 对象。
			第五步：取查询结果。
			第六步：遍历结果并打印。
	把商品数据导入到索引库中
		功能分析
			schema.xml 中定义
				1、商品 Id
				2、商品标题
				3、商品卖点
				4、商品价格
				5、商品图片
				6、分类名称
				7、商品描述
			需要从 tb_item, tb_item_cat, tb_item_desc 表中查询数据。
				Sql1：
					SELECT
						a.id,
						a.title,
						a.sell_point,
						a.price,
						a.image,
						b. NAME category_name,
						c.item_desc
					FROM
						tb_item a,
						tb_item_cat b,
						tb_item_desc c
					WHERE
						a.cid = b.id
					AND a.id = c.item_id
					AND a.`status` = 1;
				Sql2：
					SELECT
						a.id,
						a.title,
						a.sell_point,
						a.price,
						a.image,
						b. NAME category_name,
						c.item_desc
					FROM
						tb_item a
					JOIN tb_item_cat b ON a.cid = b.id
					JOIN tb_item_desc c ON a.id = c.item_id
					WHERE
						a.`status` = 1
			参数：无
			业务逻辑：taotao-search 中实现
				1、查询所有商品数据。
				2、创建一个 SolrServer 对象。
				3、为每个商品创建一个 SolrInputDocument 对象。
				4、为文档添加域
				5、向索引库中添加文档。
				6、返回 TaotaoResult。
			在 manager-web 中调用服务。实现数据导入功能。



SolrCloud
	SolrCloud 是 Solr 提供的分布式搜索方案；
		当索引量很大，搜索请求并发很高，需要大规模，容错，分布式索引和检索能力时，需要 SolrCloud 来满足这些需求。
		当一个系统的索引数据量少的时候是不需要使用 SolrCloud 的。
	SolrCloud 是基于 Solr 和 Zookeeper 的分布式搜索方案，它的主要思想是使用 Zookeeper 作为集群的配置信息中心。
		它有几个特色功能：
			1) 集中式的配置信息
			2) 自动容错
			3) 近实时搜索
			4) 查询时自动负载均衡
	Solr 集群的系统架构
		Solr 集群的结构分析
			SolrCloud 物理结构：
				三个 Solr 实例 (每个实例包括两个 Core) ，组成一个 SolrCloud。
			SolrCloud 逻辑结构：
					索引集合包括两个 Shard (shard1 和 shard2) ，shard1 和 shard2 分别由三个 Core 组成，
					其中一个 Leader 两个 Replication，Leader 是由 zookeeper 选举产生，
					zookeeper 控制每个 shard 上三个 Core 的索引数据一致，解决高可用问题。
					用户发起索引请求分别从 shard1 和 shard2 上获取，解决高并发问题。
				collection：
					Collection 在 SolrCloud 集群中是一个逻辑意义上的完整的索引结构。
					它常常被划分为一个或多个 Shard (分片) ，它们使用相同的配置信息。
					比如：针对商品信息搜索可以创建一个 collection。
						collection=shard1+shard2+....+shardX
				Shard：
					Collection 的逻辑分片。
					每个 Shard 被化成一个或者多个 replication，通过选举确定哪个是 Leader。
				Master 或 Slave：
					Master 是 master-slave 结构中的主结点 (通常说主服务器) ，
					Slave 是 master-slave 结构中的从结点 (通常说从服务器或备服务器) 。
					同一个 Shard 下 master 和 slave 存储的数据是一致的，这是为了达到高可用目的。
				Core：
					每个 Core 是 Solr 中一个独立运行单位，提供 索引和搜索服务。
					一个 shard 需要由一个 Core 或多个 Core 组成。
					由于 collection 由多个 shard 组成所以 collection 一般由多个 core 组成。
		Zookeeper 引入：
			Zookeeper 作为集群的管理工具：
				1、集群管理：容错、负载均衡。
				2、配置文件的集中管理
				3、集群的入口
			需要实现 zookeeper 高可用，需要搭建集群，建议是奇数节点。所以至少需要三个 zookeeper 服务器。
			搭建 solr 集群至少需要 7 台服务器：
				需要三个 zookeeper 节点
				需要四个 tomcat 节点。
	Solr 集群实现
		Zookeeper 集群搭建：
			第一步：需要安装 jdk 环境。
			第二步：把 zookeeper 的压缩包上传到服务器。
			第三步：解压缩。
			第四步：把 zookeeper 复制三份。
				[root@localhost ~]# mkdir /usr/local/solr-cloud
				[root@localhost ~]# cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper01
				[root@localhost ~]# cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper02
				[root@localhost ~]# cp -r zookeeper-3.4.6 /usr/local/solr-cloud/zookeeper03
			第五步：在每个 zookeeper 目录下创建一个 data 目录。
			第六步：在 data 目录下创建一个 myid 文件，文件名就叫做“myid”。内容就是每个实例的 id。例如 1、2、3
				[root@localhost data]# echo 1 >> myid
				[root@localhost data]# ll
				total 4
				-rw-r--r--. 1 root root 2 Apr 7 18:23 myid
				[root@localhost data]# cat myid 
				1
			第七步：修改配置文件。把 conf 目录下的 zoo_sample.cfg 文件改名为 zoo.cfg
				server.1=192.168.25.154:2881:3881
				server.2=192.168.25.154:2882:3882
				server.3=192.168.25.154:2883:3883
			第八步：启动每个 zookeeper 实例。
				启动 bin/zkServer.sh start
				查看 zookeeper 的状态：
				bin/zkServer.sh status
		Solr 集群搭建：
			第一步：创建四个 tomcat 实例。每个 tomcat 运行在不同的端口。8180、8280、8380、8480
			第二步：部署 solr 的 war 包。把单机版的 solr 工程复制到集群中的 tomcat 中。
			第三步：为每个 solr 实例创建一个对应的 solrhome。使用单机版的 solrhome 复制四份。
			第四步：需要修改 solr 的 web.xml 文件。把 solrhome 关联起来。
			第五步：配置 solrCloud 相关的配置。每个 solrhome 下都有一个 solr.xml，把其中的 ip 及端口号配置好。
			第六步：让 zookeeper 统一管理配置文件。
				需要把 solrhome/collection1/conf 目录上传到 zookeeper。上传任意 solrhome 中的配置文件即可。
				使用工具上传配置文件：/root/solr-4.10.3/example/scripts/cloud-scripts/zkcli.sh
					./zkcli.sh -zkhost 192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183 -cmd upconfig -confdir /usr/local/solr-cloud/solrhome01/collection1/conf -confname myconf
				查看 zookeeper 上的配置文件：
				使用 zookeeper 目录下的 bin/zkCli.sh 命令查看 zookeeper 上的配置文件：
					[root@localhost bin]# ./zkCli.sh 
					[zk: localhost:2181(CONNECTED) 0] ls /
					[configs, zookeeper]
					[zk: localhost:2181(CONNECTED) 1] ls /configs
					[myconf]
					[zk: localhost:2181(CONNECTED) 2] ls /configs/myconf
					[admin-extra.menu-top.html, currency.xml, protwords.txt, mapping-FoldToASCII.txt, _schema_analysis_synonyms_english.json, _rest_managed.json, solrconfig.xml, _schema_analysis_stopwords_english.json, stopwords.txt, lang, spellings.txt, mapping-ISOLatin1Accent.txt, admin-extra.html, xslt, synonyms.txt, scripts.conf, update-script.js, velocity, elevate.xml, admin-extra.menu-bottom.html, clustering, schema.xml]
					[zk: localhost:2181(CONNECTED) 3] 
				退出：
					[zk: localhost:2181(CONNECTED) 3] quit
			第七步：修改 tomcat/bin 目录下的 catalina.sh 文件，关联 solr 和 zookeeper。
				把此配置添加到配置文件中：
				JAVA_OPTS="-DzkHost=192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183"
			第八步：启动每个 tomcat 实例。要包装 zookeeper 集群是启动状态。
			第九步：访问集群
			第十步：创建新的 Collection 进行分片处理。
				http://192.168.25.154:8180/solr/admin/collections?action=CREATE&name=collection2&numShards=2&replicationFactor=2
			第十一步：删除不用的 Collection。
				http://192.168.25.154:8180/solr/admin/collections?action=DELETE&name=collection1


SolrJ 管理集群
	添加文档
		使用步骤：
			第一步：把 solrJ 相关的 jar 包添加到工程中。
			第二步：创建一个 SolrServer 对象，需要使用 CloudSolrServer 子类。构造方法的参数是 zookeeper 的地址列表。
			第三步：需要设置 DefaultCollection 属性。
			第四步：创建一 SolrInputDocument 对象。
			第五步：向文档对象中添加域
			第六步：把文档对象写入索引库。
			第七步：提交。
	查询文档
		创建一个 CloudSolrServer 对象，其他处理和单机版一致。

实例
	搜索功能切换到集群版
		<!-- 单机版 solr 服务配置 -->
		<!-- <bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
			<constructor-arg name="baseURL" value="http://192.168.25.154:8080/solr"></constructor-arg>
		</bean> -->
		<!-- 集群版 solr 服务 -->
		<bean id="cloudSolrServer" class="org.apache.solr.client.solrj.impl.CloudSolrServer">
			<constructor-arg name="zkHost" value="192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183"></constructor-arg>	
			<property name="defaultCollection" value="collection2"></property>
		</bean>



