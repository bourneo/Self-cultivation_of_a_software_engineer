
Dubbo 


Dubbo 核心

	是什么：
		
	为什么使用：
		分布式中，表现层和服务层之间的通信；
	基本原理：
		服务消费者；
		服务提供者；
	怎么使用：
		手动添加包依赖；
		配置 ZooKeeper；
		在 Spring 配置文件中配置。
		
	
	Dubbo 服务中间件；解决服务层和表现层两个工程之间的通信。在 Spring 中的配置。
		dubbo-admin：Dubbo监控中心。


	远程通信方案：
		1、Webservice：效率不高基于soap协议。项目中不推荐使用。
		2、Restful形式的服务：http+json 。如果服务太多，服务之间调用关系混乱，需要治疗服务。
		3、Dubbo。使用rpc协议进行远程调用，直接使用socket通信。


	使用 Dubbo 进行通信
		1）服务提供者；Provider
		2）服务消费者；Consumer
		3）注册中心；Registry
		4）监控中心；Monitor


	节点角色说明：
		Provider: 暴露服务的服务提供方。
		Consumer: 调用远程服务的服务消费方。
		Registry: 服务注册与发现的注册中心。
		Monitor: 统计服务的调用次调和调用时间的监控中心。
		Container: 服务运行容器。
		
	调用关系说明：
		0. 服务容器负责启动，加载，运行服务提供者。
		1. 服务提供者在启动时，向注册中心注册自己提供的服务。
		2. 服务消费者在启动时，向注册中心订阅自己所需的服务。
		3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
		4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
		5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。


		
	使用方法：
		Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，
		Dubbo基于Spring的Schema扩展进行加载。

		单一工程中spring的配置
			<bean id="xxxService" class="com.xxx.XxxServiceImpl" />
			<bean id="xxxAction" class="com.xxx.XxxAction">
				<property name="xxxService" ref="xxxService" />
			</bean>

		远程服务：
			在本地服务的基础上，只需做简单配置，即可完成远程化：
			将上面的local.xml配置拆分成两份，将服务定义部分放在服务提供方remote-provider.xml，
			将服务引用部分放在服务消费方remote-consumer.xml。
			并在提供方增加暴露服务配置<dubbo:service>，在消费方增加引用服务配置<dubbo:reference>。
		
		发布服务：
			<!-- 和本地服务一样实现远程服务 -->
			<bean id="xxxService" class="com.xxx.XxxServiceImpl" />
			<!-- 增加暴露远程服务配置 -->
			<dubbo:service interface="com.xxx.XxxService" ref="xxxService" />

		调用服务：
			<!-- 增加引用远程服务配置 -->
			<dubbo:reference id="xxxService" interface="com.xxx.XxxService" />
			<!-- 和本地服务一样使用远程服务 -->
			<bean id="xxxAction" class="com.xxx.XxxAction">
				<property name="xxxService" ref="xxxService" />
			</bean>

	注册中心
		注册中心负责服务地址的注册与查找，相当于目录服务，
		服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。
		使用dubbo-2.3.3以上版本，建议使用zookeeper注册中心。
		Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，
		支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用

		
		
	发布服务示例：
		在 Service工程中添加 dubbo 依赖的 jar 包；
		在 Spring 的配置文件中添加dubbo的约束，然后使用dubbo:service发布服务：
			配置扫描路径：
				<context:component-scan base-package="com.taotao.service"></context:component-scan>
			配置 dubbo 服务：
				<!-- 使用dubbo发布服务 -->
				<!-- 提供方应用信息，用于计算依赖关系 -->
				<dubbo:application name="taotao-manager" />
				<dubbo:registry protocol="zookeeper"
					address="192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183" />
				<!-- 用dubbo协议在20880端口暴露服务 -->
				<dubbo:protocol name="dubbo" port="20880" />
				<!-- 声明需要暴露的服务接口 -->
				<dubbo:service interface="com.taotao.service.ItemService" ref="itemServiceImpl" />
		
	引用服务示例：
		web 工程中添加 dubbo 依赖的 jar 包；
		在 springmvc 的配置文件中添加服务的引用：
			配置扫描路径：
				<context:component-scan base-package="com.taotao.controller" />
			配置注解驱动来支持注解：
				<mvc:annotation-driven />
			解析器过滤资源的前缀和后缀：
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
			配置 dubbo 服务：
				<!-- 引用dubbo服务 -->
				<dubbo:application name="taotao-manager-web"/>
				<dubbo:registry protocol="zookeeper" address="192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183"/>	
				<dubbo:reference interface="com.taotao.service.ItemService" id="itemService" />
		
		
	监控中心：
		需要安装 tomcat，然后部署监控中心即可。
		1、部署监控中心：
			[root@localhost ~]# cp dubbo-admin-2.5.4.war apache-tomcat-7.0.47/webapps/dubbo-admin.war 
		2、启动 tomcat
		3、访问 http://192.168.25.167:8080/dubbo-admin/
			用户名：root
			密码：root
			如果监控中心和注册中心在同一台服务器上，可以不需要任何配置。
			如果不在同一台服务器，需要修改配置文件：
				/root/apache-tomcat-7.0.47/webapps/dubbo-admin/WEB-INF/dubbo.properties

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	